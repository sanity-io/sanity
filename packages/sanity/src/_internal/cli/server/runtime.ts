import fs from 'node:fs/promises'
import path from 'node:path'

import chokidar from 'chokidar'

import {debug as serverDebug} from './debug'
import {getEntryModule} from './getEntryModule'
import {
  decorateIndexWithAutoGeneratedWarning,
  getPossibleDocumentComponentLocations,
  renderDocument,
} from './renderDocument'
import {getSanityStudioConfigPath} from './sanityConfig'
import {loadSanityMonorepo} from './sanityMonorepo'

const debug = serverDebug.extend('runtime')

export interface RuntimeOptions {
  cwd: string
  reactStrictMode: boolean
  watch: boolean
  basePath?: string
  isStudioApp?: boolean
}

/**
 * Generates the `.sanity/runtime` directory, and optionally watches for custom
 * document files, rebuilding when they change
 *
 * @param options - Current working directory (Sanity root dir), and whether or not to watch
 * @internal
 */
export async function writeSanityRuntime({
  cwd,
  reactStrictMode,
  watch,
  basePath,
  isStudioApp = true,
}: RuntimeOptions): Promise<void> {
  debug('Making runtime directory')
  const runtimeDir = path.join(cwd, '.sanity', 'runtime')
  await fs.mkdir(runtimeDir, {recursive: true})

  // Only load monorepo info for Studio apps
  const monorepo = isStudioApp ? await loadSanityMonorepo(cwd) : undefined

  async function renderAndWriteDocument() {
    debug('Rendering document template')
    const indexHtml = decorateIndexWithAutoGeneratedWarning(
      await renderDocument({
        studioRootPath: cwd,
        monorepo,
        props: {
          entryPath: isStudioApp
            ? `/${path.relative(cwd, path.join(runtimeDir, 'app.js'))}`
            : '/src/main.tsx', // TODO: change to be more like studio, possibly dyanmic
          basePath: basePath || '/',
        },
        isStudioApp,
      }),
    )

    debug('Writing index.html to runtime directory')
    await fs.writeFile(path.join(runtimeDir, 'index.html'), indexHtml)
  }

  if (watch) {
    chokidar
      .watch(getPossibleDocumentComponentLocations(cwd))
      .on('all', () => renderAndWriteDocument())
  }

  await renderAndWriteDocument()

  // Only generate app.js for Studio apps
  if (isStudioApp) {
    debug('Writing app.js to runtime directory')
    const studioConfigPath = await getSanityStudioConfigPath(cwd)
    const relativeConfigLocation = studioConfigPath
      ? path.relative(runtimeDir, studioConfigPath)
      : null

    await fs.writeFile(
      path.join(runtimeDir, 'app.js'),
      getEntryModule({reactStrictMode, relativeConfigLocation, basePath}),
    )
  }
}
