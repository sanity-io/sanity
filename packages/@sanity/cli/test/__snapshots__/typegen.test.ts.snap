// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`CLI: \`sanity typegen\` > sanity typegen generate: formats code 1`] = `
"/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: \`sanity typegen generate\`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

import '@sanity/client';

import type { ProjectionBase } from 'groq';

export declare const internalGroqTypeReferenceTo: unique symbol;

export type Person = {
  _id: string;
  _type: 'person';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
};

export type Slug = {
  _type: 'slug';
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = Person | Slug;

// Source: ./working-schema.json
// Schema ID: default
export type DefaultSchema = Person | Slug;

declare module 'groq' {
  interface SanitySchemas {
    default: DefaultSchema;
  }
}

// Source: ./src/queries.ts
// Variable: PAGE_QUERY
// Query: *[_type == "page" && slug.current == $slug][0]
export type PAGE_QUERYResult = null;

// Source: ./src/queries.ts
// Variable: PERSON_PROJECTION
// Projection: {name, "slugValue": slug.current}
export type PERSON_PROJECTIONProjectionResult = ProjectionBase<
  {
    name: string | null;
    slugValue: string | null;
  },
  'person'
>;

declare module '@sanity/client' {
  interface SanityQueries {
    '*[_type == "page" && slug.current == $slug][0]': PAGE_QUERYResult;
  }
}

declare module 'groq' {
  interface SanityQueries {
    '*[_type == "page" && slug.current == $slug][0]': PAGE_QUERYResult;
  }
  interface SanityProjections {
    '{name, "slugValue": slug.current}': PERSON_PROJECTIONProjectionResult;
  }
}
"
`;

exports[`CLI: \`sanity typegen\` > sanity typegen generate: with overloadClientMethods false 1`] = `
"/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: \`sanity typegen generate\`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

import type { ProjectionBase } from 'groq';

export declare const internalGroqTypeReferenceTo: unique symbol;

export type Person = {
  _id: string;
  _type: 'person';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
};

export type Slug = {
  _type: 'slug';
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = Person | Slug;

// Source: ./working-schema.json
// Schema ID: default
export type DefaultSchema = Person | Slug;

// Source: ./src/queries.ts
// Variable: PAGE_QUERY
// Query: *[_type == "page" && slug.current == $slug][0]
export type PAGE_QUERYResult = null;

// Source: ./src/queries.ts
// Variable: PERSON_PROJECTION
// Projection: {name, "slugValue": slug.current}
export type PERSON_PROJECTIONProjectionResult = ProjectionBase<
  {
    name: string | null;
    slugValue: string | null;
  },
  'person'
>;
"
`;
