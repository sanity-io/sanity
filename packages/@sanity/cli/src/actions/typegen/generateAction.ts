/* eslint-disable max-statements */
import {constants, mkdir, open, stat} from 'node:fs/promises'
import {dirname, join} from 'node:path'
import process from 'node:process'
import {Worker} from 'node:worker_threads'

import {DEFAULT_CONFIG, readConfig} from '@sanity/codegen'

import {type CliCommandArguments, type CliCommandContext} from '../../types'
import {getCliWorkerPath} from '../../util/cliWorker'
import {createReceiver} from '../../util/workerChannel'
import {
  type TypegenGenerateTypesWorkerData,
  type TypegenWorkerChannel,
} from '../../workers/typegenGenerate'
import {TypesGeneratedTrace} from './generate.telemetry'

export interface TypegenGenerateTypesCommandFlags {
  'config-path'?: string
}

const DEFAULT_CONFIG_PATH = 'sanity-typegen.json'
const GENERATED_FILE_WARNING = `/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: \`sanity typegen generate\`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */\n\n`

const percentageFormatter = new Intl.NumberFormat('en-US', {
  style: 'percent',
  minimumFractionDigits: 1,
  maximumFractionDigits: 1,
})

const percent = (value: number): string => percentageFormatter.format(Math.min(value, 1))

const count = (
  amount: number,
  plural: string,
  singular: string = plural.slice(0, Math.max(0, plural.length - 1)),
): string => `${amount.toLocaleString('en-US')} ${amount === 1 ? singular : plural}`

export default async function typegenGenerateAction(
  args: CliCommandArguments<TypegenGenerateTypesCommandFlags>,
  context: CliCommandContext,
): Promise<void> {
  const flags = args.extOptions
  const {output, workDir, telemetry} = context

  const trace = telemetry.trace(TypesGeneratedTrace)
  trace.start()

  const spinner = output.spinner('Generating types…')
  spinner.start()

  let codegenConfig
  const configPath = flags['config-path'] ?? DEFAULT_CONFIG_PATH
  try {
    codegenConfig = await readConfig(configPath)
    spinner.info(`Using typegen configuration found at "${configPath}"`)
  } catch (error) {
    if (error?.code !== 'ENOENT') throw error
    codegenConfig = DEFAULT_CONFIG

    if (configPath !== DEFAULT_CONFIG_PATH) {
      spinner.warn(
        `Configuration file not found at specified path "${configPath}". Falling back to default settings.`,
      )
    }
  }
  const {
    schemas,
    augmentGroqModule,
    formatGeneratedCode,
    generates,
    overloadClientMethods,
    path: searchPath,
  } = codegenConfig

  spinner.start(`Loading schema${schemas.length === 1 ? '' : 's'}…`)

  const outputPath = join(process.cwd(), generates)
  await mkdir(dirname(outputPath), {recursive: true})

  const workerData: TypegenGenerateTypesWorkerData = {
    workDir,
    schemas,
    searchPath,
    overloadClientMethods,
    augmentGroqModule,
  }
  const worker = new Worker(await getCliWorkerPath('typegenGenerate'), {
    workerData,
    env: process.env,
  })
  const receiver = createReceiver<TypegenWorkerChannel>(worker)

  let fileHandle
  let schemaStats
  let queryStats

  try {
    await receiver.event.loadedSchemas()
    spinner.succeed(
      schemas.length === 1
        ? `Loaded schema from ${schemas[0].schemaPath}`
        : `Loaded ${count(schemas.length, 'schemas')}`,
    )

    spinner.start('Generating schema types…')
    fileHandle = await open(outputPath, 'w')
    await fileHandle.write(GENERATED_FILE_WARNING)
    const schemaResult = await receiver.event.generatedSchemaDeclarations()
    schemaStats = schemaResult.schemaStats
    await fileHandle.write(schemaResult.code)

    const schemaTypesCount = count(schemaStats.schemaTypesCount, 'schema types')
    const schemaCount = count(schemaStats.schemaCount, 'schemas')
    spinner.succeed(
      `Generated ${schemaTypesCount}${schemas.length > 1 ? ` from ${schemaCount}` : ''}`,
    )

    spinner.start('Generating query types…')
    const expectedFiles = (await receiver.event.fileCount()).fileCount
    const expectedFileCount = count(expectedFiles, 'files')

    for await (const {
      progress,
      ...queryResult
    } of receiver.stream.generatedQueryResultDeclaration()) {
      const queryCount = count(progress.queriesCount, 'queries', 'query')
      const projectionCount = count(progress.projectionsCount, 'projections')
      spinner.text =
        `Generating query types… (${percent(progress.filesCount / expectedFiles)})\n` +
        `  └─ Processed ${progress.filesCount} of ${expectedFileCount}. Found ${queryCount}, ${projectionCount}.`

      if (queryResult.type === 'error') {
        spinner.fail(queryResult.message)
      }

      if (queryResult.type === 'declaration') {
        await fileHandle.write(queryResult.code)
      }
    }

    const result = await receiver.event.generationComplete()
    queryStats = result.queryStats
    await fileHandle.write(result.augmentedQueryResultDeclarations.code)
    await fileHandle.close()
    fileHandle = null

    const queryTypesCount = count(queryStats.queriesCount, 'query types')
    const projectionTypesCount = count(queryStats.projectionsCount, 'projection types')
    const scannedFilesCount = count(queryStats.totalScannedFilesCount, 'scanned files')
    spinner.succeed(
      `Generated ${queryTypesCount} and ${projectionTypesCount} from ${scannedFilesCount}`,
    )

    if (formatGeneratedCode) {
      spinner.start(`Formatting generated types with prettier…`)

      try {
        const prettier = await import('prettier')
        const prettierConfig = await prettier.resolveConfig(outputPath)

        fileHandle = await open(outputPath, constants.O_RDWR)
        const code = await fileHandle.readFile({encoding: 'utf-8'})
        const formattedCode = await prettier.format(code, {
          ...prettierConfig,
          parser: 'typescript' as const,
        })
        await fileHandle.truncate()
        await fileHandle.write(formattedCode, 0)
        await fileHandle.close()
        fileHandle = null

        spinner.succeed('Formatted generated types with prettier')
      } catch (err) {
        spinner.warn(`Failed to format generated types with prettier: ${err.message}`)
      }
    }

    // Gather final stats and report success
    const outputStat = await stat(outputPath)

    trace.log({
      outputSize: outputStat.size,
      ...schemaStats,
      ...queryStats,
      configOverloadClientMethods: overloadClientMethods,
      configAugmentGroqModule: augmentGroqModule,
    })

    if (queryStats.errorCount > 0) {
      spinner.warn(
        `Encountered ${count(queryStats.errorCount, 'errors')} in ${count(queryStats.filesWithErrors, 'files')} while generating types to ${generates}`,
      )
    } else {
      spinner.succeed(`Successfully generated types to ${generates}`)
    }
  } catch (err) {
    trace.error(err)
    throw err
  } finally {
    await fileHandle?.close()
    await receiver.dispose()
    trace.complete()
  }
}
