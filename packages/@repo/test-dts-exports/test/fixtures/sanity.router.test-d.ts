// Auto-generated by running `pnpm generate:dts-exports`
// If deleting the exports, for example, then please use this command to regenerate the tests
// If you need to investigate where new imports are coming from run `TEST_DTS_EXPORTS_DIAGNOSTICS=full pnpm generate:dts-exports`

import {describe, expectTypeOf, test} from 'vitest'
import type {
  _createNode,
  BaseIntentParams,
  decodeJsonParams,
  encodeJsonParams,
  IntentJsonParams,
  IntentLink,
  IntentLinkProps,
  IntentParameters,
  InternalSearchParam,
  Link,
  LinkProps,
  MatchError,
  MatchOk,
  MatchResult,
  NavigateBaseOptions,
  NavigateOptions,
  NavigateOptionsWithState,
  NextStateOrOptions,
  route,
  Route,
  RouteChildren,
  RouteNodeOptions,
  RouteObject,
  Router,
  RouterContext,
  RouterContextValue,
  RouterNode,
  RouterProvider,
  RouterProviderProps,
  RouterState,
  RouteScope,
  RouteScopeProps,
  RouteSegment,
  RouteTransform,
  SearchParam,
  StateLink,
  StateLinkProps,
  STICKY_PARAMS,
  useIntentLink,
  UseIntentLinkOptions,
  useLink,
  UseLinkOptions,
  useRouter,
  useRouterState,
  useStateLink,
  UseStateLinkOptions,
  withRouter,
  WithRouter,
  WithRouterProps,
} from 'sanity/router'

describe('sanity/router', () => {
  test('_createNode', () => {
    expectTypeOf<typeof _createNode>().toBeFunction()
  })
  test('BaseIntentParams', () => {
    expectTypeOf<BaseIntentParams>().toBeObject()
  })
  test('decodeJsonParams', () => {
    expectTypeOf<typeof decodeJsonParams>().toBeFunction()
  })
  test('encodeJsonParams', () => {
    expectTypeOf<typeof encodeJsonParams>().toBeFunction()
  })
  test('IntentJsonParams', () => {
    expectTypeOf<IntentJsonParams>().not.toBeNever()
  })
  test('IntentLink', () => {
    expectTypeOf<typeof IntentLink>().not.toBeNever()
  })
  test('IntentLinkProps', () => {
    expectTypeOf<IntentLinkProps>().toBeObject()
  })
  test('IntentParameters', () => {
    expectTypeOf<IntentParameters>().not.toBeNever()
  })
  test('InternalSearchParam', () => {
    expectTypeOf<InternalSearchParam>().not.toBeNever()
  })
  test('Link', () => {
    expectTypeOf<typeof Link>().not.toBeNever()
  })
  test('LinkProps', () => {
    expectTypeOf<LinkProps>().toBeObject()
  })
  test('MatchError', () => {
    expectTypeOf<MatchError>().toBeObject()
  })
  test('MatchOk', () => {
    expectTypeOf<MatchOk>().toBeObject()
  })
  test('MatchResult', () => {
    expectTypeOf<MatchResult>().not.toBeNever()
  })
  test('NavigateBaseOptions', () => {
    expectTypeOf<NavigateBaseOptions>().toBeObject()
  })
  test('NavigateOptions', () => {
    expectTypeOf<NavigateOptions>().toBeObject()
  })
  test('NavigateOptionsWithState', () => {
    expectTypeOf<NavigateOptionsWithState>().toBeObject()
  })
  test('NextStateOrOptions', () => {
    expectTypeOf<NextStateOrOptions>().not.toBeNever()
  })
  test('route', () => {
    expectTypeOf<typeof route>().not.toBeNever()
  })
  test('Route', () => {
    expectTypeOf<Route>().toBeObject()
  })
  test('RouteChildren', () => {
    expectTypeOf<RouteChildren>().not.toBeNever()
  })
  test('RouteNodeOptions', () => {
    expectTypeOf<RouteNodeOptions>().toBeObject()
  })
  test('RouteObject', () => {
    expectTypeOf<RouteObject>().toBeObject()
  })
  test('Router', () => {
    expectTypeOf<Router>().toBeObject()
  })
  test('RouterContext', () => {
    expectTypeOf<typeof RouterContext>().not.toBeNever()
  })
  test('RouterContextValue', () => {
    expectTypeOf<RouterContextValue>().toBeObject()
  })
  test('RouterNode', () => {
    expectTypeOf<RouterNode>().toBeObject()
  })
  test('RouterProvider', () => {
    expectTypeOf<typeof RouterProvider>().toBeFunction()
  })
  test('RouterProviderProps', () => {
    expectTypeOf<RouterProviderProps>().toBeObject()
  })
  test('RouterState', () => {
    expectTypeOf<RouterState>().not.toBeNever()
  })
  test('RouteScope', () => {
    expectTypeOf<typeof RouteScope>().not.toBeNever()
  })
  test('RouteScopeProps', () => {
    expectTypeOf<RouteScopeProps>().toBeObject()
  })
  test('RouteSegment', () => {
    expectTypeOf<RouteSegment>().toBeObject()
  })
  test('RouteTransform', () => {
    expectTypeOf<RouteTransform<any>>().toBeObject()
  })
  test('SearchParam', () => {
    expectTypeOf<SearchParam>().not.toBeNever()
  })
  test('StateLink', () => {
    expectTypeOf<typeof StateLink>().not.toBeNever()
  })
  test('StateLinkProps', () => {
    expectTypeOf<StateLinkProps>().toBeObject()
  })
  test('STICKY_PARAMS', () => {
    expectTypeOf<typeof STICKY_PARAMS>().not.toBeNever()
  })
  test('useIntentLink', () => {
    expectTypeOf<typeof useIntentLink>().toBeFunction()
  })
  test('UseIntentLinkOptions', () => {
    expectTypeOf<UseIntentLinkOptions>().toBeObject()
  })
  test('useLink', () => {
    expectTypeOf<typeof useLink>().toBeFunction()
  })
  test('UseLinkOptions', () => {
    expectTypeOf<UseLinkOptions>().toBeObject()
  })
  test('useRouter', () => {
    expectTypeOf<typeof useRouter>().toBeFunction()
  })
  test('useRouterState', () => {
    // This export has 2 declarations, run `TEST_DTS_EXPORTS_DIAGNOSTICS=duplicates pnpm generate:dts-exports` to see where each declaration is coming from
    expectTypeOf<typeof useRouterState>().toBeFunction()
  })
  test('useStateLink', () => {
    expectTypeOf<typeof useStateLink>().toBeFunction()
  })
  test('UseStateLinkOptions', () => {
    expectTypeOf<UseStateLinkOptions>().toBeObject()
  })
  test('withRouter', () => {
    expectTypeOf<typeof withRouter>().toBeFunction()
  })
  test('WithRouter', () => {
    expectTypeOf<typeof WithRouter>().not.toBeNever()
  })
  test('WithRouterProps', () => {
    expectTypeOf<WithRouterProps>().toBeObject()
  })
})
