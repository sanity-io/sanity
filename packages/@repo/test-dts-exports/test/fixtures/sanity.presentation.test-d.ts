// Auto-generated by running `pnpm generate:dts-exports`
// If deleting the exports, for example, then please use this command to regenerate the tests
import {describe, expectTypeOf, test} from 'vitest'
import type {
  CombinedSearchParams,
  ConnectionStatus,
  ContextFn,
  defineDocuments,
  defineLocations,
  DocumentLocation,
  DocumentLocationResolver,
  DocumentLocationResolverObject,
  DocumentLocationResolvers,
  DocumentLocationsState,
  DocumentResolver,
  DocumentResolverContext,
  HeaderOptions,
  InspectorTab,
  NavigatorOptions,
  PresentationNavigateContextValue,
  PresentationParams,
  PresentationPerspective,
  PresentationPluginOptions,
  PresentationSearchParams,
  PresentationStateParams,
  presentationTool,
  PresentationViewport,
  PreviewHeaderProps,
  PreviewProps,
  PreviewUrlOption,
  PreviewUrlResolver,
  PreviewUrlResolverOptions,
  Serializable,
  SerializableArray,
  SerializableObject,
  SerializablePrimitive,
  StructureDocumentPaneParams,
  usePresentationNavigate,
  usePresentationParams,
  useSharedState,
} from 'sanity/presentation'

describe('sanity/presentation', () => {
  test('CombinedSearchParams', () => {
    expectTypeOf<CombinedSearchParams>().toBeObject()
  })
  test('ConnectionStatus', () => {
    expectTypeOf<ConnectionStatus>().not.toBeNever()
  })
  test('ContextFn', () => {
    expectTypeOf<ContextFn<any>>().not.toBeNever()
  })
  test('defineDocuments', () => {
    expectTypeOf<typeof defineDocuments>().toBeFunction()
  })
  test('defineLocations', () => {
    expectTypeOf<typeof defineLocations>().toBeFunction()
  })
  test('DocumentLocation', () => {
    expectTypeOf<DocumentLocation>().toBeObject()
  })
  test('DocumentLocationResolver', () => {
    expectTypeOf<DocumentLocationResolver>().not.toBeNever()
  })
  test('DocumentLocationResolverObject', () => {
    expectTypeOf<DocumentLocationResolverObject<any>>().not.toBeNever()
  })
  test('DocumentLocationResolvers', () => {
    expectTypeOf<DocumentLocationResolvers>().not.toBeNever()
  })
  test('DocumentLocationsState', () => {
    expectTypeOf<DocumentLocationsState>().toBeObject()
  })
  test('DocumentResolver', () => {
    expectTypeOf<DocumentResolver>().not.toBeNever()
  })
  test('DocumentResolverContext', () => {
    expectTypeOf<DocumentResolverContext>().toBeObject()
  })
  test('HeaderOptions', () => {
    expectTypeOf<HeaderOptions>().toBeObject()
  })
  test('InspectorTab', () => {
    expectTypeOf<InspectorTab>().toBeObject()
  })
  test('NavigatorOptions', () => {
    expectTypeOf<NavigatorOptions>().toBeObject()
  })
  test('PresentationNavigateContextValue', () => {
    expectTypeOf<PresentationNavigateContextValue>().not.toBeNever()
  })
  test('PresentationParams', () => {
    expectTypeOf<PresentationParams>().toBeObject()
  })
  test('PresentationPerspective', () => {
    expectTypeOf<PresentationPerspective>().not.toBeNever()
  })
  test('PresentationPluginOptions', () => {
    expectTypeOf<PresentationPluginOptions>().toBeObject()
  })
  test('PresentationSearchParams', () => {
    expectTypeOf<PresentationSearchParams>().toBeObject()
  })
  test('PresentationStateParams', () => {
    expectTypeOf<PresentationStateParams>().toBeObject()
  })
  test('presentationTool', () => {
    expectTypeOf<typeof presentationTool>().not.toBeNever()
  })
  test('PresentationViewport', () => {
    expectTypeOf<PresentationViewport>().not.toBeNever()
  })
  test('PreviewHeaderProps', () => {
    expectTypeOf<PreviewHeaderProps>().toBeObject()
  })
  test('PreviewProps', () => {
    expectTypeOf<PreviewProps>().toBeObject()
  })
  test('PreviewUrlOption', () => {
    expectTypeOf<PreviewUrlOption>().not.toBeNever()
  })
  test('PreviewUrlResolver', () => {
    expectTypeOf<PreviewUrlResolver<any>>().not.toBeNever()
  })
  test('PreviewUrlResolverOptions', () => {
    expectTypeOf<PreviewUrlResolverOptions>().toBeObject()
  })
  test('Serializable', () => {
    expectTypeOf<Serializable>().not.toBeNever()
  })
  test('SerializableArray', () => {
    expectTypeOf<SerializableArray>().not.toBeNever()
  })
  test('SerializableObject', () => {
    expectTypeOf<SerializableObject>().not.toBeNever()
  })
  test('SerializablePrimitive', () => {
    expectTypeOf<SerializablePrimitive>().not.toBeNever()
  })
  test('StructureDocumentPaneParams', () => {
    expectTypeOf<StructureDocumentPaneParams>().toBeObject()
  })
  test('usePresentationNavigate', () => {
    expectTypeOf<typeof usePresentationNavigate>().toBeFunction()
  })
  test('usePresentationParams', () => {
    // Source: packages/sanity/lib/presentation.d.ts:3212
    expectTypeOf<typeof usePresentationParams>().toBeFunction()
    // Source: packages/sanity/lib/presentation.d.ts:3215
    expectTypeOf<typeof usePresentationParams>().toBeFunction()
  })
  test('useSharedState', () => {
    expectTypeOf<typeof useSharedState>().not.toBeNever()
  })
})
