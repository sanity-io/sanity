// Auto-generated by running `pnpm generate:dts-exports`
// If deleting the exports, for example, then please use this command to regenerate the tests
import {describe, expectTypeOf, test} from 'vitest'
import type {
  _resolveKeyedPath,
  FOCUS_TERMINATOR,
  fromString,
  get,
  hasFocus,
  hasItemFocus,
  isEqual,
  isExpanded,
  isSegmentEqual,
  numEqualSegments,
  pathFor,
  resolveKeyedPath,
  startsWith,
  toString,
  trimChildPath,
  trimLeft,
  trimRight,
} from '@sanity/util/paths'

describe('@sanity/util/paths', () => {
  test('_resolveKeyedPath', () => {
    expectTypeOf<typeof _resolveKeyedPath>().toBeFunction()
  })
  test('FOCUS_TERMINATOR', () => {
    expectTypeOf<typeof FOCUS_TERMINATOR>().not.toBeNever()
  })
  test('fromString', () => {
    expectTypeOf<typeof fromString>().toBeFunction()
  })
  test('get', () => {
    // Source: packages/@sanity/util/lib/paths.d.ts:8
    expectTypeOf<typeof get>().toBeFunction()
    // Source: packages/@sanity/util/lib/paths.d.ts:10
    expectTypeOf<typeof get>().toBeFunction()
  })
  test('hasFocus', () => {
    expectTypeOf<typeof hasFocus>().toBeFunction()
  })
  test('hasItemFocus', () => {
    expectTypeOf<typeof hasItemFocus>().toBeFunction()
  })
  test('isEqual', () => {
    expectTypeOf<typeof isEqual>().toBeFunction()
  })
  test('isExpanded', () => {
    expectTypeOf<typeof isExpanded>().toBeFunction()
  })
  test('isSegmentEqual', () => {
    expectTypeOf<typeof isSegmentEqual>().toBeFunction()
  })
  test('numEqualSegments', () => {
    expectTypeOf<typeof numEqualSegments>().toBeFunction()
  })
  test('pathFor', () => {
    expectTypeOf<typeof pathFor>().toBeFunction()
  })
  test('resolveKeyedPath', () => {
    expectTypeOf<typeof resolveKeyedPath>().toBeFunction()
  })
  test('startsWith', () => {
    expectTypeOf<typeof startsWith>().toBeFunction()
  })
  test('toString', () => {
    expectTypeOf<typeof toString>().toBeFunction()
  })
  test('trimChildPath', () => {
    expectTypeOf<typeof trimChildPath>().toBeFunction()
  })
  test('trimLeft', () => {
    expectTypeOf<typeof trimLeft>().toBeFunction()
  })
  test('trimRight', () => {
    expectTypeOf<typeof trimRight>().toBeFunction()
  })
})
