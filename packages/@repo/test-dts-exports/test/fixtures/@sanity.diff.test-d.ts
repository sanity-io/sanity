// Auto-generated by running `pnpm generate:dts-exports`
// If deleting the exports, for example, then please use this command to regenerate the tests
// If you need to investigate where new imports are coming from run `TEST_DTS_EXPORTS_DIAGNOSTICS=full pnpm generate:dts-exports`

import {describe, expectTypeOf, test} from 'vitest'
import type {
  AddedDiff,
  ArrayDiff,
  ArrayInput,
  BaseInput,
  BooleanDiff,
  BooleanInput,
  ChangedDiff,
  Diff,
  diffInput,
  DiffOptions,
  FullDiff,
  Input,
  ItemDiff,
  NullDiff,
  NullInput,
  NumberDiff,
  NumberInput,
  ObjectDiff,
  ObjectInput,
  RemovedDiff,
  StringDiff,
  StringDiffSegment,
  StringInput,
  StringSegmentChanged,
  StringSegmentUnchanged,
  TypeChangeDiff,
  UnchangedDiff,
  ValueType,
  wrap,
} from '@sanity/diff'

describe('@sanity/diff', () => {
  test('AddedDiff', () => {
    expectTypeOf<AddedDiff<any, any>>().toBeObject()
  })
  test('ArrayDiff', () => {
    expectTypeOf<ArrayDiff<any, any>>().not.toBeNever()
  })
  test('ArrayInput', () => {
    expectTypeOf<ArrayInput<any>>().toBeObject()
  })
  test('BaseInput', () => {
    expectTypeOf<BaseInput<any>>().toBeObject()
  })
  test('BooleanDiff', () => {
    expectTypeOf<BooleanDiff<any>>().not.toBeNever()
  })
  test('BooleanInput', () => {
    expectTypeOf<BooleanInput<any>>().toBeObject()
  })
  test('ChangedDiff', () => {
    expectTypeOf<ChangedDiff<any, any>>().toBeObject()
  })
  test('Diff', () => {
    expectTypeOf<Diff<any>>().not.toBeNever()
  })
  test('diffInput', () => {
    expectTypeOf<typeof diffInput>().toBeFunction()
  })
  test('DiffOptions', () => {
    expectTypeOf<DiffOptions>().not.toBeNever()
  })
  test('FullDiff', () => {
    expectTypeOf<FullDiff<any, any>>().not.toBeNever()
  })
  test('Input', () => {
    expectTypeOf<Input<any>>().not.toBeNever()
  })
  test('ItemDiff', () => {
    expectTypeOf<ItemDiff<any>>().toBeObject()
  })
  test('NullDiff', () => {
    expectTypeOf<NullDiff<any>>().not.toBeNever()
  })
  test('NullInput', () => {
    expectTypeOf<NullInput<any>>().toBeObject()
  })
  test('NumberDiff', () => {
    expectTypeOf<NumberDiff<any>>().not.toBeNever()
  })
  test('NumberInput', () => {
    expectTypeOf<NumberInput<any>>().toBeObject()
  })
  test('ObjectDiff', () => {
    expectTypeOf<ObjectDiff<any, any>>().not.toBeNever()
  })
  test('ObjectInput', () => {
    expectTypeOf<ObjectInput<any>>().toBeObject()
  })
  test('RemovedDiff', () => {
    expectTypeOf<RemovedDiff<any, any>>().toBeObject()
  })
  test('StringDiff', () => {
    expectTypeOf<StringDiff<any>>().not.toBeNever()
  })
  test('StringDiffSegment', () => {
    expectTypeOf<StringDiffSegment<any>>().not.toBeNever()
  })
  test('StringInput', () => {
    expectTypeOf<StringInput<any>>().toBeObject()
  })
  test('StringSegmentChanged', () => {
    expectTypeOf<StringSegmentChanged<any>>().toBeObject()
  })
  test('StringSegmentUnchanged', () => {
    expectTypeOf<StringSegmentUnchanged>().toBeObject()
  })
  test('TypeChangeDiff', () => {
    expectTypeOf<TypeChangeDiff<any>>().toBeObject()
  })
  test('UnchangedDiff', () => {
    expectTypeOf<UnchangedDiff<any, any>>().toBeObject()
  })
  test('ValueType', () => {
    expectTypeOf<ValueType>().not.toBeNever()
  })
  test('wrap', () => {
    expectTypeOf<typeof wrap>().toBeFunction()
  })
})
