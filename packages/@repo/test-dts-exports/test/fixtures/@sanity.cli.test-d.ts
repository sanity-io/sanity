// Auto-generated by running `pnpm generate:dts-exports`
// If deleting the exports, for example, then please use this command to regenerate the tests
import {describe, expectTypeOf, test} from 'vitest'
import type {
  CliApiClient,
  CliApiConfig,
  CliBaseCommandContext,
  CliClientOptions,
  CliCommandAction,
  CliCommandArguments,
  CliCommandContext,
  CliCommandDefinition,
  CliCommandGroupDefinition,
  CliCommandRunner,
  CliConfig,
  CliOutputter,
  CliPrompter,
  CliStubbedYarn,
  CliUserConfig,
  CliV2CommandContext,
  CliV3CommandContext,
  CliYarnOptions,
  CommandRunnerOptions,
  createCliConfig,
  defineCliConfig,
  getCliClient,
  GraphQLAPIConfig,
  loadEnv,
  PackageJson,
  ReactCompilerConfig,
  ResolvedCliCommand,
  SanityClient,
  SanityCore,
  SanityJson,
  SanityModuleInternal,
  SanityUser,
  SinglePrompt,
  TelemetryUserProperties,
  UserViteConfig,
} from '@sanity/cli'

describe('@sanity/cli', () => {
  test('CliApiClient', () => {
    expectTypeOf<CliApiClient>().not.toBeNever()
  })
  test('CliApiConfig', () => {
    expectTypeOf<CliApiConfig>().toBeObject()
  })
  test('CliBaseCommandContext', () => {
    expectTypeOf<CliBaseCommandContext>().toBeObject()
  })
  test('CliClientOptions', () => {
    expectTypeOf<CliClientOptions>().toBeObject()
  })
  test('CliCommandAction', () => {
    expectTypeOf<CliCommandAction<any>>().not.toBeNever()
  })
  test('CliCommandArguments', () => {
    expectTypeOf<CliCommandArguments<any>>().toBeObject()
  })
  test('CliCommandContext', () => {
    expectTypeOf<CliCommandContext>().not.toBeNever()
  })
  test('CliCommandDefinition', () => {
    expectTypeOf<CliCommandDefinition<any>>().toBeObject()
  })
  test('CliCommandGroupDefinition', () => {
    expectTypeOf<CliCommandGroupDefinition>().toBeObject()
  })
  test('CliCommandRunner', () => {
    expectTypeOf<CliCommandRunner>().toBeObject()
  })
  test('CliConfig', () => {
    expectTypeOf<CliConfig>().toBeObject()
  })
  test('CliOutputter', () => {
    expectTypeOf<CliOutputter>().toBeObject()
  })
  test('CliPrompter', () => {
    expectTypeOf<CliPrompter>().not.toBeNever()
  })
  test('CliStubbedYarn', () => {
    expectTypeOf<CliStubbedYarn>().not.toBeNever()
  })
  test('CliUserConfig', () => {
    expectTypeOf<CliUserConfig>().toBeObject()
  })
  test('CliV2CommandContext', () => {
    expectTypeOf<CliV2CommandContext>().toBeObject()
  })
  test('CliV3CommandContext', () => {
    expectTypeOf<CliV3CommandContext>().toBeObject()
  })
  test('CliYarnOptions', () => {
    expectTypeOf<CliYarnOptions>().toBeObject()
  })
  test('CommandRunnerOptions', () => {
    expectTypeOf<CommandRunnerOptions>().toBeObject()
  })
  test('createCliConfig', () => {
    expectTypeOf<typeof createCliConfig>().toBeFunction()
  })
  test('defineCliConfig', () => {
    expectTypeOf<typeof defineCliConfig>().toBeFunction()
  })
  test('getCliClient', () => {
    // Source: packages/@sanity/cli/lib/index.d.ts:250
    expectTypeOf<typeof getCliClient>().toBeFunction()
    // Source: packages/@sanity/cli/lib/index.d.ts:252
    expectTypeOf<typeof getCliClient>().not.toBeNever()
  })
  test('GraphQLAPIConfig', () => {
    expectTypeOf<GraphQLAPIConfig>().toBeObject()
  })
  test('loadEnv', () => {
    expectTypeOf<typeof loadEnv>().toBeFunction()
  })
  test('PackageJson', () => {
    expectTypeOf<PackageJson>().toBeObject()
  })
  test('ReactCompilerConfig', () => {
    expectTypeOf<ReactCompilerConfig>().toBeObject()
  })
  test('ResolvedCliCommand', () => {
    expectTypeOf<ResolvedCliCommand>().toBeObject()
  })
  test('SanityClient', () => {
    expectTypeOf<SanityClient>().not.toBeNever()
  })
  test('SanityCore', () => {
    expectTypeOf<SanityCore>().toBeObject()
  })
  test('SanityJson', () => {
    expectTypeOf<SanityJson>().toBeObject()
  })
  test('SanityModuleInternal', () => {
    expectTypeOf<SanityModuleInternal>().toBeObject()
  })
  test('SanityUser', () => {
    expectTypeOf<SanityUser>().not.toBeNever()
  })
  test('SinglePrompt', () => {
    expectTypeOf<SinglePrompt>().not.toBeNever()
  })
  test('TelemetryUserProperties', () => {
    expectTypeOf<TelemetryUserProperties>().toBeObject()
  })
  test('UserViteConfig', () => {
    expectTypeOf<UserViteConfig>().not.toBeNever()
  })
})
