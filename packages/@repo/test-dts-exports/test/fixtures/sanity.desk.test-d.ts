// Auto-generated by running `pnpm generate:dts-exports`
// If deleting the exports, for example, then please use this command to regenerate the tests
import {describe, expectTypeOf, test} from 'vitest'
import type {
  BackLinkProps,
  BaseGenericList,
  BaseIntentParams,
  BaseResolvedPaneNode,
  BaseView,
  BuildableComponent,
  BuildableGenericList,
  BuildableList,
  Builder,
  Child,
  ChildLinkProps,
  ChildObservable,
  ChildResolver,
  ChildResolverOptions,
  Collection,
  CollectionBuilder,
  component,
  Component,
  ComponentBuilder,
  ComponentInput,
  ComponentView,
  ComponentViewBuilder,
  ConfirmDeleteDialog,
  ConfirmDeleteDialogProps,
  createStructureBuilder,
  CustomComponentPaneNode,
  DEFAULT_INTENT_HANDLER,
  DefaultDocumentNodeContext,
  DefaultDocumentNodeResolver,
  defaultInitialValueTemplateItems,
  defaultIntentChecker,
  deskTool,
  DeskToolContextValue,
  DeskToolFeatures,
  DeskToolMenuItem,
  DeskToolOptions,
  DeskToolPaneActionHandler,
  DeskToolProvider,
  DeskToolProviderProps,
  Divider,
  DocumentBuilder,
  DocumentFieldMenuActionNode,
  documentFromEditor,
  documentFromEditorWithInitialValue,
  DocumentInspectorHeader,
  DocumentList,
  DocumentListBuilder,
  DocumentListInput,
  DocumentListItem,
  DocumentListItemBuilder,
  DocumentListItemInput,
  DocumentListOptions,
  DocumentListPane,
  DocumentListPaneNode,
  DocumentListPaneProps,
  DocumentNode,
  DocumentOptions,
  DocumentPane,
  DocumentPaneNode,
  DocumentPaneProvider,
  DocumentPaneProviderProps,
  DocumentTypeListBuilder,
  DocumentTypeListInput,
  EditorNode,
  EditReferenceOptions,
  form,
  FormView,
  FormViewBuilder,
  GenericList,
  GenericListBuilder,
  GenericListInput,
  GenericViewBuilder,
  getOrderingMenuItem,
  getOrderingMenuItemsForSchemaType,
  getTypeNamesFromFilter,
  HELP_URL,
  InitialValueTemplateItemBuilder,
  Intent,
  IntentChecker,
  IntentJsonParams,
  IntentParams,
  isDocumentListItem,
  ItemChild,
  List,
  ListBuilder,
  ListDisplayOptions,
  ListInput,
  ListItem,
  ListItemBuilder,
  ListItemChild,
  ListItemDisplayOptions,
  ListItemInput,
  ListItemSerializeOptions,
  ListPaneNode,
  maybeSerializeInitialValueTemplateItem,
  maybeSerializeMenuItem,
  maybeSerializeMenuItemGroup,
  maybeSerializeView,
  MenuItem,
  MenuItemActionType,
  MenuItemBuilder,
  MenuItemGroup,
  MenuItemGroupBuilder,
  MenuItemParamsType,
  menuItemsFromInitialValueTemplateItems,
  PaneLayout,
  PaneListItem,
  PaneListItemDivider,
  PaneMenuItem,
  PaneMenuItemGroup,
  PaneNode,
  PaneNodeResolver,
  PaneRouterContextValue,
  ParameterizedLinkProps,
  PartialDocumentList,
  PartialDocumentListItem,
  PartialDocumentNode,
  PartialListItem,
  PartialMenuItem,
  ReferenceChildLinkProps,
  RouterPaneGroup,
  RouterPanes,
  RouterPaneSibling,
  RouterPaneSiblingContext,
  Serializable,
  SerializablePaneNode,
  SerializeError,
  SerializeOptions,
  SerializePath,
  shallowIntentChecker,
  SortMenuItem,
  StructureBuilder,
  StructureBuilderOptions,
  StructureContext,
  structureLocaleNamespace,
  StructureLocaleResourceKeys,
  StructureNode,
  StructureResolver,
  StructureResolverContext,
  UnresolvedPaneNode,
  UnserializedListItem,
  UnserializedListItemChild,
  useDeskTool,
  useDocumentPane,
  useDocumentTitle,
  usePaneRouter,
  UserComponent,
  UserViewComponent,
  View,
  ViewBuilder,
} from 'sanity/desk'

describe('sanity/desk', () => {
  test('BackLinkProps', () => {
    expectTypeOf<BackLinkProps>().not.toBeNever()
  })
  test('BaseGenericList', () => {
    expectTypeOf<BaseGenericList>().not.toBeNever()
  })
  test('BaseIntentParams', () => {
    expectTypeOf<BaseIntentParams>().not.toBeNever()
  })
  test('BaseResolvedPaneNode', () => {
    expectTypeOf<BaseResolvedPaneNode<any>>().toBeObject()
  })
  test('BaseView', () => {
    expectTypeOf<BaseView>().not.toBeNever()
  })
  test('BuildableComponent', () => {
    expectTypeOf<BuildableComponent>().not.toBeNever()
  })
  test('BuildableGenericList', () => {
    expectTypeOf<BuildableGenericList>().not.toBeNever()
  })
  test('BuildableList', () => {
    expectTypeOf<BuildableList>().not.toBeNever()
  })
  test('Builder', () => {
    expectTypeOf<Builder>().not.toBeNever()
  })
  test('Child', () => {
    expectTypeOf<Child>().not.toBeNever()
  })
  test('ChildLinkProps', () => {
    expectTypeOf<ChildLinkProps>().not.toBeNever()
  })
  test('ChildObservable', () => {
    expectTypeOf<ChildObservable>().not.toBeNever()
  })
  test('ChildResolver', () => {
    expectTypeOf<ChildResolver>().not.toBeNever()
  })
  test('ChildResolverOptions', () => {
    expectTypeOf<ChildResolverOptions>().not.toBeNever()
  })
  test('Collection', () => {
    expectTypeOf<Collection>().not.toBeNever()
  })
  test('CollectionBuilder', () => {
    expectTypeOf<CollectionBuilder>().not.toBeNever()
  })
  test('component', () => {
    expectTypeOf<typeof component>().not.toBeNever()
  })
  test('Component', () => {
    expectTypeOf<Component>().not.toBeNever()
  })
  test('ComponentBuilder', () => {
    expectTypeOf<typeof ComponentBuilder>().not.toBeNever()
  })
  test('ComponentInput', () => {
    expectTypeOf<ComponentInput>().not.toBeNever()
  })
  test('ComponentView', () => {
    expectTypeOf<ComponentView>().not.toBeNever()
  })
  test('ComponentViewBuilder', () => {
    expectTypeOf<typeof ComponentViewBuilder>().not.toBeNever()
  })
  test('ConfirmDeleteDialog', () => {
    expectTypeOf<typeof ConfirmDeleteDialog>().not.toBeNever()
  })
  test('ConfirmDeleteDialogProps', () => {
    expectTypeOf<ConfirmDeleteDialogProps>().not.toBeNever()
  })
  test('createStructureBuilder', () => {
    expectTypeOf<typeof createStructureBuilder>().not.toBeNever()
  })
  test('CustomComponentPaneNode', () => {
    expectTypeOf<CustomComponentPaneNode>().not.toBeNever()
  })
  test('DEFAULT_INTENT_HANDLER', () => {
    expectTypeOf<typeof DEFAULT_INTENT_HANDLER>().not.toBeNever()
  })
  test('DefaultDocumentNodeContext', () => {
    expectTypeOf<DefaultDocumentNodeContext>().not.toBeNever()
  })
  test('DefaultDocumentNodeResolver', () => {
    expectTypeOf<DefaultDocumentNodeResolver>().not.toBeNever()
  })
  test('defaultInitialValueTemplateItems', () => {
    expectTypeOf<typeof defaultInitialValueTemplateItems>().not.toBeNever()
  })
  test('defaultIntentChecker', () => {
    expectTypeOf<typeof defaultIntentChecker>().not.toBeNever()
  })
  test('deskTool', () => {
    expectTypeOf<typeof deskTool>().not.toBeNever()
  })
  test('DeskToolContextValue', () => {
    expectTypeOf<DeskToolContextValue>().not.toBeNever()
  })
  test('DeskToolFeatures', () => {
    expectTypeOf<DeskToolFeatures>().not.toBeNever()
  })
  test('DeskToolMenuItem', () => {
    expectTypeOf<DeskToolMenuItem>().not.toBeNever()
  })
  test('DeskToolOptions', () => {
    expectTypeOf<DeskToolOptions>().not.toBeNever()
  })
  test('DeskToolPaneActionHandler', () => {
    expectTypeOf<DeskToolPaneActionHandler>().not.toBeNever()
  })
  test('DeskToolProvider', () => {
    expectTypeOf<typeof DeskToolProvider>().not.toBeNever()
  })
  test('DeskToolProviderProps', () => {
    expectTypeOf<DeskToolProviderProps>().not.toBeNever()
  })
  test('Divider', () => {
    expectTypeOf<Divider>().not.toBeNever()
  })
  test('DocumentBuilder', () => {
    expectTypeOf<typeof DocumentBuilder>().not.toBeNever()
  })
  test('DocumentFieldMenuActionNode', () => {
    expectTypeOf<DocumentFieldMenuActionNode>().not.toBeNever()
  })
  test('documentFromEditor', () => {
    expectTypeOf<typeof documentFromEditor>().not.toBeNever()
  })
  test('documentFromEditorWithInitialValue', () => {
    expectTypeOf<typeof documentFromEditorWithInitialValue>().not.toBeNever()
  })
  test('DocumentInspectorHeader', () => {
    expectTypeOf<typeof DocumentInspectorHeader>().not.toBeNever()
  })
  test('DocumentList', () => {
    expectTypeOf<DocumentList>().not.toBeNever()
  })
  test('DocumentListBuilder', () => {
    expectTypeOf<typeof DocumentListBuilder>().not.toBeNever()
  })
  test('DocumentListInput', () => {
    expectTypeOf<DocumentListInput>().not.toBeNever()
  })
  test('DocumentListItem', () => {
    expectTypeOf<DocumentListItem>().not.toBeNever()
  })
  test('DocumentListItemBuilder', () => {
    expectTypeOf<typeof DocumentListItemBuilder>().not.toBeNever()
  })
  test('DocumentListItemInput', () => {
    expectTypeOf<DocumentListItemInput>().not.toBeNever()
  })
  test('DocumentListOptions', () => {
    expectTypeOf<DocumentListOptions>().not.toBeNever()
  })
  test('DocumentListPane', () => {
    expectTypeOf<typeof DocumentListPane>().not.toBeNever()
  })
  test('DocumentListPaneNode', () => {
    expectTypeOf<DocumentListPaneNode>().not.toBeNever()
  })
  test('DocumentListPaneProps', () => {
    expectTypeOf<DocumentListPaneProps>().not.toBeNever()
  })
  test('DocumentNode', () => {
    expectTypeOf<DocumentNode>().not.toBeNever()
  })
  test('DocumentOptions', () => {
    expectTypeOf<DocumentOptions>().not.toBeNever()
  })
  test('DocumentPane', () => {
    expectTypeOf<typeof DocumentPane>().not.toBeNever()
  })
  test('DocumentPaneNode', () => {
    expectTypeOf<DocumentPaneNode>().not.toBeNever()
  })
  test('DocumentPaneProvider', () => {
    expectTypeOf<typeof DocumentPaneProvider>().not.toBeNever()
  })
  test('DocumentPaneProviderProps', () => {
    expectTypeOf<DocumentPaneProviderProps>().not.toBeNever()
  })
  test('DocumentTypeListBuilder', () => {
    expectTypeOf<typeof DocumentTypeListBuilder>().not.toBeNever()
  })
  test('DocumentTypeListInput', () => {
    expectTypeOf<DocumentTypeListInput>().not.toBeNever()
  })
  test('EditorNode', () => {
    expectTypeOf<EditorNode>().not.toBeNever()
  })
  test('EditReferenceOptions', () => {
    expectTypeOf<EditReferenceOptions>().not.toBeNever()
  })
  test('form', () => {
    expectTypeOf<typeof form>().not.toBeNever()
  })
  test('FormView', () => {
    expectTypeOf<FormView>().not.toBeNever()
  })
  test('FormViewBuilder', () => {
    expectTypeOf<typeof FormViewBuilder>().not.toBeNever()
  })
  test('GenericList', () => {
    expectTypeOf<GenericList>().not.toBeNever()
  })
  test('GenericListBuilder', () => {
    expectTypeOf<typeof GenericListBuilder>().not.toBeNever()
  })
  test('GenericListInput', () => {
    expectTypeOf<GenericListInput>().not.toBeNever()
  })
  test('GenericViewBuilder', () => {
    expectTypeOf<typeof GenericViewBuilder>().not.toBeNever()
  })
  test('getOrderingMenuItem', () => {
    expectTypeOf<typeof getOrderingMenuItem>().not.toBeNever()
  })
  test('getOrderingMenuItemsForSchemaType', () => {
    expectTypeOf<typeof getOrderingMenuItemsForSchemaType>().not.toBeNever()
  })
  test('getTypeNamesFromFilter', () => {
    expectTypeOf<typeof getTypeNamesFromFilter>().not.toBeNever()
  })
  test('HELP_URL', () => {
    expectTypeOf<typeof HELP_URL>().not.toBeNever()
  })
  test('InitialValueTemplateItemBuilder', () => {
    expectTypeOf<typeof InitialValueTemplateItemBuilder>().not.toBeNever()
  })
  test('Intent', () => {
    expectTypeOf<Intent>().not.toBeNever()
  })
  test('IntentChecker', () => {
    expectTypeOf<IntentChecker>().not.toBeNever()
  })
  test('IntentJsonParams', () => {
    expectTypeOf<IntentJsonParams>().not.toBeNever()
  })
  test('IntentParams', () => {
    expectTypeOf<IntentParams>().not.toBeNever()
  })
  test('isDocumentListItem', () => {
    expectTypeOf<typeof isDocumentListItem>().not.toBeNever()
  })
  test('ItemChild', () => {
    expectTypeOf<ItemChild>().not.toBeNever()
  })
  test('List', () => {
    expectTypeOf<List>().not.toBeNever()
  })
  test('ListBuilder', () => {
    expectTypeOf<typeof ListBuilder>().not.toBeNever()
  })
  test('ListDisplayOptions', () => {
    expectTypeOf<ListDisplayOptions>().not.toBeNever()
  })
  test('ListInput', () => {
    expectTypeOf<ListInput>().not.toBeNever()
  })
  test('ListItem', () => {
    expectTypeOf<ListItem>().not.toBeNever()
  })
  test('ListItemBuilder', () => {
    expectTypeOf<typeof ListItemBuilder>().not.toBeNever()
  })
  test('ListItemChild', () => {
    expectTypeOf<ListItemChild>().not.toBeNever()
  })
  test('ListItemDisplayOptions', () => {
    expectTypeOf<ListItemDisplayOptions>().not.toBeNever()
  })
  test('ListItemInput', () => {
    expectTypeOf<ListItemInput>().not.toBeNever()
  })
  test('ListItemSerializeOptions', () => {
    expectTypeOf<ListItemSerializeOptions>().not.toBeNever()
  })
  test('ListPaneNode', () => {
    expectTypeOf<ListPaneNode>().not.toBeNever()
  })
  test('maybeSerializeInitialValueTemplateItem', () => {
    expectTypeOf<typeof maybeSerializeInitialValueTemplateItem>().not.toBeNever()
  })
  test('maybeSerializeMenuItem', () => {
    expectTypeOf<typeof maybeSerializeMenuItem>().not.toBeNever()
  })
  test('maybeSerializeMenuItemGroup', () => {
    expectTypeOf<typeof maybeSerializeMenuItemGroup>().not.toBeNever()
  })
  test('maybeSerializeView', () => {
    expectTypeOf<typeof maybeSerializeView>().not.toBeNever()
  })
  test('MenuItem', () => {
    expectTypeOf<MenuItem>().not.toBeNever()
  })
  test('MenuItemActionType', () => {
    expectTypeOf<MenuItemActionType>().not.toBeNever()
  })
  test('MenuItemBuilder', () => {
    expectTypeOf<typeof MenuItemBuilder>().not.toBeNever()
  })
  test('MenuItemGroup', () => {
    expectTypeOf<MenuItemGroup>().not.toBeNever()
  })
  test('MenuItemGroupBuilder', () => {
    expectTypeOf<typeof MenuItemGroupBuilder>().not.toBeNever()
  })
  test('MenuItemParamsType', () => {
    expectTypeOf<MenuItemParamsType>().not.toBeNever()
  })
  test('menuItemsFromInitialValueTemplateItems', () => {
    expectTypeOf<typeof menuItemsFromInitialValueTemplateItems>().not.toBeNever()
  })
  test('PaneLayout', () => {
    expectTypeOf<typeof PaneLayout>().not.toBeNever()
  })
  test('PaneListItem', () => {
    expectTypeOf<PaneListItem>().not.toBeNever()
  })
  test('PaneListItemDivider', () => {
    expectTypeOf<PaneListItemDivider>().not.toBeNever()
  })
  test('PaneMenuItem', () => {
    expectTypeOf<PaneMenuItem>().not.toBeNever()
  })
  test('PaneMenuItemGroup', () => {
    expectTypeOf<PaneMenuItemGroup>().not.toBeNever()
  })
  test('PaneNode', () => {
    expectTypeOf<PaneNode>().not.toBeNever()
  })
  test('PaneNodeResolver', () => {
    expectTypeOf<PaneNodeResolver>().not.toBeNever()
  })
  test('PaneRouterContextValue', () => {
    expectTypeOf<PaneRouterContextValue>().not.toBeNever()
  })
  test('ParameterizedLinkProps', () => {
    expectTypeOf<ParameterizedLinkProps>().not.toBeNever()
  })
  test('PartialDocumentList', () => {
    expectTypeOf<PartialDocumentList>().not.toBeNever()
  })
  test('PartialDocumentListItem', () => {
    expectTypeOf<PartialDocumentListItem>().not.toBeNever()
  })
  test('PartialDocumentNode', () => {
    expectTypeOf<PartialDocumentNode>().not.toBeNever()
  })
  test('PartialListItem', () => {
    expectTypeOf<PartialListItem>().not.toBeNever()
  })
  test('PartialMenuItem', () => {
    expectTypeOf<PartialMenuItem>().not.toBeNever()
  })
  test('ReferenceChildLinkProps', () => {
    expectTypeOf<ReferenceChildLinkProps>().not.toBeNever()
  })
  test('RouterPaneGroup', () => {
    expectTypeOf<RouterPaneGroup>().not.toBeNever()
  })
  test('RouterPanes', () => {
    expectTypeOf<RouterPanes>().not.toBeNever()
  })
  test('RouterPaneSibling', () => {
    expectTypeOf<RouterPaneSibling>().not.toBeNever()
  })
  test('RouterPaneSiblingContext', () => {
    expectTypeOf<RouterPaneSiblingContext>().not.toBeNever()
  })
  test('Serializable', () => {
    expectTypeOf<Serializable<any>>().toBeObject()
  })
  test('SerializablePaneNode', () => {
    expectTypeOf<SerializablePaneNode>().not.toBeNever()
  })
  test('SerializeError', () => {
    expectTypeOf<typeof SerializeError>().not.toBeNever()
  })
  test('SerializeOptions', () => {
    expectTypeOf<SerializeOptions>().not.toBeNever()
  })
  test('SerializePath', () => {
    expectTypeOf<SerializePath>().not.toBeNever()
  })
  test('shallowIntentChecker', () => {
    expectTypeOf<typeof shallowIntentChecker>().not.toBeNever()
  })
  test('SortMenuItem', () => {
    expectTypeOf<SortMenuItem>().not.toBeNever()
  })
  test('StructureBuilder', () => {
    expectTypeOf<StructureBuilder>().not.toBeNever()
  })
  test('StructureBuilderOptions', () => {
    expectTypeOf<StructureBuilderOptions>().not.toBeNever()
  })
  test('StructureContext', () => {
    expectTypeOf<StructureContext>().not.toBeNever()
  })
  test('structureLocaleNamespace', () => {
    expectTypeOf<typeof structureLocaleNamespace>().not.toBeNever()
  })
  test('StructureLocaleResourceKeys', () => {
    expectTypeOf<StructureLocaleResourceKeys>().not.toBeNever()
  })
  test('StructureNode', () => {
    expectTypeOf<StructureNode>().not.toBeNever()
  })
  test('StructureResolver', () => {
    expectTypeOf<StructureResolver>().not.toBeNever()
  })
  test('StructureResolverContext', () => {
    expectTypeOf<StructureResolverContext>().not.toBeNever()
  })
  test('UnresolvedPaneNode', () => {
    expectTypeOf<UnresolvedPaneNode>().not.toBeNever()
  })
  test('UnserializedListItem', () => {
    expectTypeOf<UnserializedListItem>().not.toBeNever()
  })
  test('UnserializedListItemChild', () => {
    expectTypeOf<UnserializedListItemChild>().not.toBeNever()
  })
  test('useDeskTool', () => {
    expectTypeOf<typeof useDeskTool>().not.toBeNever()
  })
  test('useDocumentPane', () => {
    expectTypeOf<typeof useDocumentPane>().not.toBeNever()
  })
  test('useDocumentTitle', () => {
    expectTypeOf<typeof useDocumentTitle>().not.toBeNever()
  })
  test('usePaneRouter', () => {
    expectTypeOf<typeof usePaneRouter>().not.toBeNever()
  })
  test('UserComponent', () => {
    expectTypeOf<UserComponent>().not.toBeNever()
  })
  test('UserViewComponent', () => {
    expectTypeOf<UserViewComponent>().not.toBeNever()
  })
  test('View', () => {
    expectTypeOf<View>().not.toBeNever()
  })
  test('ViewBuilder', () => {
    expectTypeOf<ViewBuilder>().not.toBeNever()
  })
})
