// Auto-generated by running `pnpm generate:dts-exports`
// If deleting the exports, for example, then please use this command to regenerate the tests
import {describe, expectTypeOf, test} from 'vitest'
import type {
  ActiveWorkspaceMatcherContext,
  AddonDatasetContext,
  AppIdCacheContext,
  CalendarContext,
  ChangeIndicatorTrackerContextGetSnapshot,
  ChangeIndicatorTrackerContextStore,
  ColorSchemeSetValueContext,
  ColorSchemeValueContext,
  CommentInputContext,
  CommentsAuthoringPathContext,
  CommentsContext,
  CommentsEnabledContext,
  CommentsIntentContext,
  CommentsOnboardingContext,
  CommentsSelectedPathContext,
  CommentsUpsellContext,
  CopyPasteContext,
  DiffContext,
  DocumentActionPropsContext,
  DocumentChangeContext,
  DocumentFieldActionsContext,
  DocumentFieldActionsContextValue,
  DocumentIdContext,
  DocumentIdContextValue,
  DocumentPaneContext,
  DocumentSheetListContext,
  EventsContext,
  FieldActionsContext,
  FieldActionsContextValue,
  FormBuilderContext,
  FormCallbacksContext,
  FormFieldPresenceContext,
  FormValueContext,
  FreeTrialContext,
  GetFormValueContext,
  GetFormValueContextValue,
  HoveredFieldContext,
  HoveredFieldContextValue,
  IsLastPaneContext,
  LocaleContext,
  LocaleContextValue,
  MediaLibraryIdContext,
  MentionUserContext,
  NavbarContext,
  PaneContext,
  PaneLayoutContext,
  PaneRouterContext,
  PerspectiveContext,
  PortableTextEditorElement,
  PortableTextMarkersContext,
  PortableTextMemberItemElementRefsContext,
  PortableTextMemberItemsContext,
  PresenceContext,
  PresenceTrackerContextGetSnapshot,
  PresenceTrackerContextStore,
  PresentationContext,
  PresentationDisplayedDocumentContext,
  PresentationDocumentContext,
  PresentationNavigateContext,
  PresentationPanelsContext,
  PresentationParamsContext,
  PresentationSharedStateContext,
  PreviewCardContext,
  ReferenceInputOptionsContext,
  ReferenceItemRef,
  ReferenceItemRefContext,
  ReleasesMetadataContext,
  ReleasesUpsellContext,
  ResourceCacheContext,
  ReviewChangesContext,
  RouterContext,
  RouterHistoryContext,
  SanityCreateConfigContext,
  ScheduledPublishingEnabledContext,
  ScheduledPublishingEnabledContextValue,
  SchedulePublishUpsellContext,
  SchedulePublishUpsellContextValue,
  ScrollContext,
  SearchContext,
  SortableItemIdContext,
  SourceContext,
  StructureToolContext,
  StudioAnnouncementContext,
  TableContext,
  TasksContext,
  TasksEnabledContext,
  TasksNavigationContext,
  TasksUpsellContext,
  TreeEditingEnabledContext,
  UserColorManagerContext,
  ValidationContext,
  VirtualizerScrollInstanceContext,
  WorkspaceContext,
  WorkspacesContext,
  ZIndexContext,
  zIndexContextDefaults,
} from 'sanity/_singletons'

describe('sanity/_singletons', () => {
  test('ActiveWorkspaceMatcherContext', () => {
    expectTypeOf<typeof ActiveWorkspaceMatcherContext>().not.toBeNever()
  })
  test('AddonDatasetContext', () => {
    expectTypeOf<typeof AddonDatasetContext>().not.toBeNever()
  })
  test('AppIdCacheContext', () => {
    expectTypeOf<typeof AppIdCacheContext>().not.toBeNever()
  })
  test('CalendarContext', () => {
    expectTypeOf<typeof CalendarContext>().not.toBeNever()
  })
  test('ChangeIndicatorTrackerContextGetSnapshot', () => {
    expectTypeOf<typeof ChangeIndicatorTrackerContextGetSnapshot>().not.toBeNever()
  })
  test('ChangeIndicatorTrackerContextStore', () => {
    expectTypeOf<typeof ChangeIndicatorTrackerContextStore>().not.toBeNever()
  })
  test('ColorSchemeSetValueContext', () => {
    expectTypeOf<typeof ColorSchemeSetValueContext>().not.toBeNever()
  })
  test('ColorSchemeValueContext', () => {
    expectTypeOf<typeof ColorSchemeValueContext>().not.toBeNever()
  })
  test('CommentInputContext', () => {
    expectTypeOf<typeof CommentInputContext>().not.toBeNever()
  })
  test('CommentsAuthoringPathContext', () => {
    expectTypeOf<typeof CommentsAuthoringPathContext>().not.toBeNever()
  })
  test('CommentsContext', () => {
    expectTypeOf<typeof CommentsContext>().not.toBeNever()
  })
  test('CommentsEnabledContext', () => {
    expectTypeOf<typeof CommentsEnabledContext>().not.toBeNever()
  })
  test('CommentsIntentContext', () => {
    expectTypeOf<typeof CommentsIntentContext>().not.toBeNever()
  })
  test('CommentsOnboardingContext', () => {
    expectTypeOf<typeof CommentsOnboardingContext>().not.toBeNever()
  })
  test('CommentsSelectedPathContext', () => {
    expectTypeOf<typeof CommentsSelectedPathContext>().not.toBeNever()
  })
  test('CommentsUpsellContext', () => {
    expectTypeOf<typeof CommentsUpsellContext>().not.toBeNever()
  })
  test('CopyPasteContext', () => {
    expectTypeOf<typeof CopyPasteContext>().not.toBeNever()
  })
  test('DiffContext', () => {
    expectTypeOf<typeof DiffContext>().not.toBeNever()
  })
  test('DocumentActionPropsContext', () => {
    expectTypeOf<typeof DocumentActionPropsContext>().not.toBeNever()
  })
  test('DocumentChangeContext', () => {
    expectTypeOf<typeof DocumentChangeContext>().not.toBeNever()
  })
  test('DocumentFieldActionsContext', () => {
    expectTypeOf<typeof DocumentFieldActionsContext>().not.toBeNever()
  })
  test('DocumentFieldActionsContextValue', () => {
    expectTypeOf<DocumentFieldActionsContextValue>().toBeObject()
  })
  test('DocumentIdContext', () => {
    expectTypeOf<typeof DocumentIdContext>().not.toBeNever()
  })
  test('DocumentIdContextValue', () => {
    expectTypeOf<DocumentIdContextValue>().toBeObject()
  })
  test('DocumentPaneContext', () => {
    expectTypeOf<typeof DocumentPaneContext>().not.toBeNever()
  })
  test('DocumentSheetListContext', () => {
    expectTypeOf<typeof DocumentSheetListContext>().not.toBeNever()
  })
  test('EventsContext', () => {
    expectTypeOf<typeof EventsContext>().not.toBeNever()
  })
  test('FieldActionsContext', () => {
    expectTypeOf<typeof FieldActionsContext>().not.toBeNever()
  })
  test('FieldActionsContextValue', () => {
    expectTypeOf<FieldActionsContextValue>().toBeObject()
  })
  test('FormBuilderContext', () => {
    expectTypeOf<typeof FormBuilderContext>().not.toBeNever()
  })
  test('FormCallbacksContext', () => {
    expectTypeOf<typeof FormCallbacksContext>().not.toBeNever()
  })
  test('FormFieldPresenceContext', () => {
    expectTypeOf<typeof FormFieldPresenceContext>().not.toBeNever()
  })
  test('FormValueContext', () => {
    expectTypeOf<typeof FormValueContext>().not.toBeNever()
  })
  test('FreeTrialContext', () => {
    expectTypeOf<typeof FreeTrialContext>().not.toBeNever()
  })
  test('GetFormValueContext', () => {
    expectTypeOf<typeof GetFormValueContext>().not.toBeNever()
  })
  test('GetFormValueContextValue', () => {
    expectTypeOf<GetFormValueContextValue>().not.toBeNever()
  })
  test('HoveredFieldContext', () => {
    expectTypeOf<typeof HoveredFieldContext>().not.toBeNever()
  })
  test('HoveredFieldContextValue', () => {
    expectTypeOf<HoveredFieldContextValue>().toBeObject()
  })
  test('IsLastPaneContext', () => {
    expectTypeOf<typeof IsLastPaneContext>().not.toBeNever()
  })
  test('LocaleContext', () => {
    expectTypeOf<typeof LocaleContext>().not.toBeNever()
  })
  test('LocaleContextValue', () => {
    expectTypeOf<LocaleContextValue>().toBeObject()
  })
  test('MediaLibraryIdContext', () => {
    expectTypeOf<typeof MediaLibraryIdContext>().not.toBeNever()
  })
  test('MentionUserContext', () => {
    expectTypeOf<typeof MentionUserContext>().not.toBeNever()
  })
  test('NavbarContext', () => {
    expectTypeOf<typeof NavbarContext>().not.toBeNever()
  })
  test('PaneContext', () => {
    expectTypeOf<typeof PaneContext>().not.toBeNever()
  })
  test('PaneLayoutContext', () => {
    expectTypeOf<typeof PaneLayoutContext>().not.toBeNever()
  })
  test('PaneRouterContext', () => {
    expectTypeOf<typeof PaneRouterContext>().not.toBeNever()
  })
  test('PerspectiveContext', () => {
    expectTypeOf<typeof PerspectiveContext>().not.toBeNever()
  })
  test('PortableTextEditorElement', () => {
    expectTypeOf<PortableTextEditorElement>().not.toBeNever()
  })
  test('PortableTextMarkersContext', () => {
    expectTypeOf<typeof PortableTextMarkersContext>().not.toBeNever()
  })
  test('PortableTextMemberItemElementRefsContext', () => {
    expectTypeOf<typeof PortableTextMemberItemElementRefsContext>().not.toBeNever()
  })
  test('PortableTextMemberItemsContext', () => {
    expectTypeOf<typeof PortableTextMemberItemsContext>().not.toBeNever()
  })
  test('PresenceContext', () => {
    expectTypeOf<typeof PresenceContext>().not.toBeNever()
  })
  test('PresenceTrackerContextGetSnapshot', () => {
    expectTypeOf<typeof PresenceTrackerContextGetSnapshot>().not.toBeNever()
  })
  test('PresenceTrackerContextStore', () => {
    expectTypeOf<typeof PresenceTrackerContextStore>().not.toBeNever()
  })
  test('PresentationContext', () => {
    expectTypeOf<typeof PresentationContext>().not.toBeNever()
  })
  test('PresentationDisplayedDocumentContext', () => {
    expectTypeOf<typeof PresentationDisplayedDocumentContext>().not.toBeNever()
  })
  test('PresentationDocumentContext', () => {
    expectTypeOf<typeof PresentationDocumentContext>().not.toBeNever()
  })
  test('PresentationNavigateContext', () => {
    expectTypeOf<typeof PresentationNavigateContext>().not.toBeNever()
  })
  test('PresentationPanelsContext', () => {
    expectTypeOf<typeof PresentationPanelsContext>().not.toBeNever()
  })
  test('PresentationParamsContext', () => {
    expectTypeOf<typeof PresentationParamsContext>().not.toBeNever()
  })
  test('PresentationSharedStateContext', () => {
    expectTypeOf<typeof PresentationSharedStateContext>().not.toBeNever()
  })
  test('PreviewCardContext', () => {
    expectTypeOf<typeof PreviewCardContext>().not.toBeNever()
  })
  test('ReferenceInputOptionsContext', () => {
    expectTypeOf<typeof ReferenceInputOptionsContext>().not.toBeNever()
  })
  test('ReferenceItemRef', () => {
    expectTypeOf<ReferenceItemRef>().toBeObject()
  })
  test('ReferenceItemRefContext', () => {
    expectTypeOf<typeof ReferenceItemRefContext>().not.toBeNever()
  })
  test('ReleasesMetadataContext', () => {
    expectTypeOf<typeof ReleasesMetadataContext>().not.toBeNever()
  })
  test('ReleasesUpsellContext', () => {
    expectTypeOf<typeof ReleasesUpsellContext>().not.toBeNever()
  })
  test('ResourceCacheContext', () => {
    expectTypeOf<typeof ResourceCacheContext>().not.toBeNever()
  })
  test('ReviewChangesContext', () => {
    expectTypeOf<typeof ReviewChangesContext>().not.toBeNever()
  })
  test('RouterContext', () => {
    expectTypeOf<typeof RouterContext>().not.toBeNever()
  })
  test('RouterHistoryContext', () => {
    expectTypeOf<typeof RouterHistoryContext>().not.toBeNever()
  })
  test('SanityCreateConfigContext', () => {
    expectTypeOf<typeof SanityCreateConfigContext>().not.toBeNever()
  })
  test('ScheduledPublishingEnabledContext', () => {
    expectTypeOf<typeof ScheduledPublishingEnabledContext>().not.toBeNever()
  })
  test('ScheduledPublishingEnabledContextValue', () => {
    expectTypeOf<ScheduledPublishingEnabledContextValue>().not.toBeNever()
  })
  test('SchedulePublishUpsellContext', () => {
    expectTypeOf<typeof SchedulePublishUpsellContext>().not.toBeNever()
  })
  test('SchedulePublishUpsellContextValue', () => {
    expectTypeOf<SchedulePublishUpsellContextValue>().toBeObject()
  })
  test('ScrollContext', () => {
    expectTypeOf<typeof ScrollContext>().not.toBeNever()
  })
  test('SearchContext', () => {
    expectTypeOf<typeof SearchContext>().not.toBeNever()
  })
  test('SortableItemIdContext', () => {
    expectTypeOf<typeof SortableItemIdContext>().not.toBeNever()
  })
  test('SourceContext', () => {
    expectTypeOf<typeof SourceContext>().not.toBeNever()
  })
  test('StructureToolContext', () => {
    expectTypeOf<typeof StructureToolContext>().not.toBeNever()
  })
  test('StudioAnnouncementContext', () => {
    expectTypeOf<typeof StudioAnnouncementContext>().not.toBeNever()
  })
  test('TableContext', () => {
    expectTypeOf<typeof TableContext>().not.toBeNever()
  })
  test('TasksContext', () => {
    expectTypeOf<typeof TasksContext>().not.toBeNever()
  })
  test('TasksEnabledContext', () => {
    expectTypeOf<typeof TasksEnabledContext>().not.toBeNever()
  })
  test('TasksNavigationContext', () => {
    expectTypeOf<typeof TasksNavigationContext>().not.toBeNever()
  })
  test('TasksUpsellContext', () => {
    expectTypeOf<typeof TasksUpsellContext>().not.toBeNever()
  })
  test('TreeEditingEnabledContext', () => {
    expectTypeOf<typeof TreeEditingEnabledContext>().not.toBeNever()
  })
  test('UserColorManagerContext', () => {
    expectTypeOf<typeof UserColorManagerContext>().not.toBeNever()
  })
  test('ValidationContext', () => {
    expectTypeOf<typeof ValidationContext>().not.toBeNever()
  })
  test('VirtualizerScrollInstanceContext', () => {
    expectTypeOf<typeof VirtualizerScrollInstanceContext>().not.toBeNever()
  })
  test('WorkspaceContext', () => {
    expectTypeOf<typeof WorkspaceContext>().not.toBeNever()
  })
  test('WorkspacesContext', () => {
    expectTypeOf<typeof WorkspacesContext>().not.toBeNever()
  })
  test('ZIndexContext', () => {
    expectTypeOf<typeof ZIndexContext>().not.toBeNever()
  })
  test('zIndexContextDefaults', () => {
    expectTypeOf<typeof zIndexContextDefaults>().not.toBeNever()
  })
})
