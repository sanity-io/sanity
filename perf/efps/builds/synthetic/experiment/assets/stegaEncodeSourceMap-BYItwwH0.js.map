{"version":3,"file":"stegaEncodeSourceMap-BYItwwH0.js","sources":["../../../../../../node_modules/.pnpm/@sanity+client@7.9.0_debug@4.4.1/node_modules/@sanity/client/src/csm/studioPath.ts","../../../../../../node_modules/.pnpm/@sanity+client@7.9.0_debug@4.4.1/node_modules/@sanity/client/src/csm/jsonPath.ts","../../../../../../node_modules/.pnpm/@sanity+client@7.9.0_debug@4.4.1/node_modules/@sanity/client/src/csm/resolveMapping.ts","../../../../../../node_modules/.pnpm/@sanity+client@7.9.0_debug@4.4.1/node_modules/@sanity/client/src/csm/isArray.ts","../../../../../../node_modules/.pnpm/@sanity+client@7.9.0_debug@4.4.1/node_modules/@sanity/client/src/csm/walkMap.ts","../../../../../../node_modules/.pnpm/@sanity+client@7.9.0_debug@4.4.1/node_modules/@sanity/client/src/stega/encodeIntoResult.ts","../../../../../../node_modules/.pnpm/@sanity+client@7.9.0_debug@4.4.1/node_modules/@sanity/client/src/csm/draftUtils.ts","../../../../../../node_modules/.pnpm/@sanity+client@7.9.0_debug@4.4.1/node_modules/@sanity/client/src/csm/createEditUrl.ts","../../../../../../node_modules/.pnpm/@sanity+client@7.9.0_debug@4.4.1/node_modules/@sanity/client/src/csm/resolveEditInfo.ts","../../../../../../node_modules/.pnpm/@sanity+client@7.9.0_debug@4.4.1/node_modules/@sanity/client/src/stega/filterDefault.ts","../../../../../../node_modules/.pnpm/@sanity+client@7.9.0_debug@4.4.1/node_modules/@sanity/client/src/stega/stegaEncodeSourceMap.ts"],"sourcesContent":["/** @alpha */\nexport type KeyedSegment = {_key: string}\n\n/** @alpha */\nexport type IndexTuple = [number | '', number | '']\n\n/** @alpha */\nexport type PathSegment = string | number | KeyedSegment | IndexTuple\n\n/** @alpha */\nexport type Path = PathSegment[]\n\nconst rePropName =\n  /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g\n/** @internal */\nexport const reKeySegment = /_key\\s*==\\s*['\"](.*)['\"]/\nconst reIndexTuple = /^\\d*:\\d*$/\n\n/** @internal */\nexport function isIndexSegment(segment: PathSegment): segment is number {\n  return typeof segment === 'number' || (typeof segment === 'string' && /^\\[\\d+\\]$/.test(segment))\n}\n\n/** @internal */\nexport function isKeySegment(segment: PathSegment): segment is KeyedSegment {\n  if (typeof segment === 'string') {\n    return reKeySegment.test(segment.trim())\n  }\n\n  return typeof segment === 'object' && '_key' in segment\n}\n\n/** @internal */\nexport function isIndexTuple(segment: PathSegment): segment is IndexTuple {\n  if (typeof segment === 'string' && reIndexTuple.test(segment)) {\n    return true\n  }\n\n  if (!Array.isArray(segment) || segment.length !== 2) {\n    return false\n  }\n\n  const [from, to] = segment\n  return (typeof from === 'number' || from === '') && (typeof to === 'number' || to === '')\n}\n\n/** @internal */\nexport function get<Result = unknown, Fallback = unknown>(\n  obj: unknown,\n  path: Path | string,\n  defaultVal?: Fallback,\n): Result | typeof defaultVal {\n  const select = typeof path === 'string' ? fromString(path) : path\n  if (!Array.isArray(select)) {\n    throw new Error('Path must be an array or a string')\n  }\n\n  let acc: unknown | undefined = obj\n  for (let i = 0; i < select.length; i++) {\n    const segment = select[i]\n    if (isIndexSegment(segment)) {\n      if (!Array.isArray(acc)) {\n        return defaultVal\n      }\n\n      acc = acc[segment]\n    }\n\n    if (isKeySegment(segment)) {\n      if (!Array.isArray(acc)) {\n        return defaultVal\n      }\n\n      acc = acc.find((item) => item._key === segment._key)\n    }\n\n    if (typeof segment === 'string') {\n      acc =\n        typeof acc === 'object' && acc !== null\n          ? ((acc as Record<string, unknown>)[segment] as Result)\n          : undefined\n    }\n\n    if (typeof acc === 'undefined') {\n      return defaultVal\n    }\n  }\n\n  return acc as Result\n}\n\n/** @alpha */\nexport function toString(path: Path): string {\n  if (!Array.isArray(path)) {\n    throw new Error('Path is not an array')\n  }\n\n  return path.reduce<string>((target, segment, i) => {\n    const segmentType = typeof segment\n    if (segmentType === 'number') {\n      return `${target}[${segment}]`\n    }\n\n    if (segmentType === 'string') {\n      const separator = i === 0 ? '' : '.'\n      return `${target}${separator}${segment}`\n    }\n\n    if (isKeySegment(segment) && segment._key) {\n      return `${target}[_key==\"${segment._key}\"]`\n    }\n\n    if (Array.isArray(segment)) {\n      const [from, to] = segment\n      return `${target}[${from}:${to}]`\n    }\n\n    throw new Error(`Unsupported path segment \\`${JSON.stringify(segment)}\\``)\n  }, '')\n}\n\n/** @alpha */\nexport function fromString(path: string): Path {\n  if (typeof path !== 'string') {\n    throw new Error('Path is not a string')\n  }\n\n  const segments = path.match(rePropName)\n  if (!segments) {\n    throw new Error('Invalid path string')\n  }\n\n  return segments.map(parsePathSegment)\n}\n\nfunction parsePathSegment(segment: string): PathSegment {\n  if (isIndexSegment(segment)) {\n    return parseIndexSegment(segment)\n  }\n\n  if (isKeySegment(segment)) {\n    return parseKeySegment(segment)\n  }\n\n  if (isIndexTuple(segment)) {\n    return parseIndexTupleSegment(segment)\n  }\n\n  return segment\n}\n\nfunction parseIndexSegment(segment: string): PathSegment {\n  return Number(segment.replace(/[^\\d]/g, ''))\n}\n\nfunction parseKeySegment(segment: string): KeyedSegment {\n  const segments = segment.match(reKeySegment)\n  return {_key: segments![1]}\n}\n\nfunction parseIndexTupleSegment(segment: string): IndexTuple {\n  const [from, to] = segment.split(':').map((seg) => (seg === '' ? seg : Number(seg)))\n  return [from, to]\n}\n","import * as studioPath from './studioPath'\nimport type {\n  ContentSourceMapParsedPath,\n  ContentSourceMapParsedPathKeyedSegment,\n  ContentSourceMapPaths,\n  Path,\n} from './types'\n\nconst ESCAPE: Record<string, string> = {\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t',\n  \"'\": \"\\\\'\",\n  '\\\\': '\\\\\\\\',\n}\n\nconst UNESCAPE: Record<string, string> = {\n  '\\\\f': '\\f',\n  '\\\\n': '\\n',\n  '\\\\r': '\\r',\n  '\\\\t': '\\t',\n  \"\\\\'\": \"'\",\n  '\\\\\\\\': '\\\\',\n}\n\n/**\n * @internal\n */\nexport function jsonPath(path: ContentSourceMapParsedPath): ContentSourceMapPaths[number] {\n  return `$${path\n    .map((segment) => {\n      if (typeof segment === 'string') {\n        const escapedKey = segment.replace(/[\\f\\n\\r\\t'\\\\]/g, (match) => {\n          return ESCAPE[match]\n        })\n        return `['${escapedKey}']`\n      }\n\n      if (typeof segment === 'number') {\n        return `[${segment}]`\n      }\n\n      if (segment._key !== '') {\n        const escapedKey = segment._key.replace(/['\\\\]/g, (match) => {\n          return ESCAPE[match]\n        })\n        return `[?(@._key=='${escapedKey}')]`\n      }\n\n      return `[${segment._index}]`\n    })\n    .join('')}`\n}\n\n/**\n * @internal\n */\nexport function parseJsonPath(path: ContentSourceMapPaths[number]): ContentSourceMapParsedPath {\n  const parsed: ContentSourceMapParsedPath = []\n\n  const parseRe = /\\['(.*?)'\\]|\\[(\\d+)\\]|\\[\\?\\(@\\._key=='(.*?)'\\)\\]/g\n  let match: RegExpExecArray | null\n\n  while ((match = parseRe.exec(path)) !== null) {\n    if (match[1] !== undefined) {\n      const key = match[1].replace(/\\\\(\\\\|f|n|r|t|')/g, (m) => {\n        return UNESCAPE[m]\n      })\n\n      parsed.push(key)\n      continue\n    }\n\n    if (match[2] !== undefined) {\n      parsed.push(parseInt(match[2], 10))\n      continue\n    }\n\n    if (match[3] !== undefined) {\n      const _key = match[3].replace(/\\\\(\\\\')/g, (m) => {\n        return UNESCAPE[m]\n      })\n\n      parsed.push({\n        _key,\n        _index: -1,\n      })\n      continue\n    }\n  }\n\n  return parsed\n}\n\n/**\n * @internal\n */\nexport function jsonPathToStudioPath(path: ContentSourceMapParsedPath): Path {\n  return path.map((segment) => {\n    if (typeof segment === 'string') {\n      return segment\n    }\n\n    if (typeof segment === 'number') {\n      return segment\n    }\n\n    if (segment._key !== '') {\n      return {_key: segment._key}\n    }\n\n    if (segment._index !== -1) {\n      return segment._index\n    }\n\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`)\n  })\n}\n\n/**\n * @internal\n */\nexport function studioPathToJsonPath(path: Path | string): ContentSourceMapParsedPath {\n  const parsedPath = typeof path === 'string' ? studioPath.fromString(path) : path\n\n  return parsedPath.map((segment) => {\n    if (typeof segment === 'string') {\n      return segment\n    }\n\n    if (typeof segment === 'number') {\n      return segment\n    }\n\n    if (Array.isArray(segment)) {\n      throw new Error(`IndexTuple segments aren't supported:${JSON.stringify(segment)}`)\n    }\n\n    if (isContentSourceMapParsedPathKeyedSegment(segment)) {\n      return segment\n    }\n\n    if (segment._key) {\n      return {_key: segment._key, _index: -1}\n    }\n\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`)\n  })\n}\n\nfunction isContentSourceMapParsedPathKeyedSegment(\n  segment: studioPath.PathSegment | ContentSourceMapParsedPath[number],\n): segment is ContentSourceMapParsedPathKeyedSegment {\n  return typeof segment === 'object' && '_key' in segment && '_index' in segment\n}\n\n/**\n * @internal\n */\nexport function jsonPathToMappingPath(path: ContentSourceMapParsedPath): (string | number)[] {\n  return path.map((segment) => {\n    if (typeof segment === 'string') {\n      return segment\n    }\n\n    if (typeof segment === 'number') {\n      return segment\n    }\n\n    if (segment._index !== -1) {\n      return segment._index\n    }\n\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`)\n  })\n}\n","import {jsonPath, jsonPathToMappingPath} from './jsonPath'\nimport type {ContentSourceMap, ContentSourceMapMapping, ContentSourceMapParsedPath} from './types'\n\n/**\n * @internal\n */\nexport function resolveMapping(\n  resultPath: ContentSourceMapParsedPath,\n  csm?: ContentSourceMap,\n):\n  | {\n      mapping: ContentSourceMapMapping\n      matchedPath: string\n      pathSuffix: string\n    }\n  | undefined {\n  if (!csm?.mappings) {\n    return undefined\n  }\n  const resultMappingPath = jsonPath(jsonPathToMappingPath(resultPath))\n\n  if (csm.mappings[resultMappingPath] !== undefined) {\n    return {\n      mapping: csm.mappings[resultMappingPath],\n      matchedPath: resultMappingPath,\n      pathSuffix: '',\n    }\n  }\n\n  const mappings = Object.entries(csm.mappings)\n    .filter(([key]) => resultMappingPath.startsWith(key))\n    .sort(([key1], [key2]) => key2.length - key1.length)\n\n  if (mappings.length == 0) {\n    return undefined\n  }\n\n  const [matchedPath, mapping] = mappings[0]\n  const pathSuffix = resultMappingPath.substring(matchedPath.length)\n  return {mapping, matchedPath, pathSuffix}\n}\n","/** @internal */\nexport function isArray(value: unknown): value is Array<unknown> {\n  return value !== null && Array.isArray(value)\n}\n","import {isRecord} from '../util/isRecord'\nimport {isArray} from './isArray'\nimport type {ContentSourceMapParsedPath, WalkMapFn} from './types'\n\n/**\n * generic way to walk a nested object or array and apply a mapping function to each value\n * @internal\n */\nexport function walkMap(\n  value: unknown,\n  mappingFn: WalkMapFn,\n  path: ContentSourceMapParsedPath = [],\n): unknown {\n  if (isArray(value)) {\n    return value.map((v, idx) => {\n      if (isRecord(v)) {\n        const _key = v['_key']\n        if (typeof _key === 'string') {\n          return walkMap(v, mappingFn, path.concat({_key, _index: idx}))\n        }\n      }\n\n      return walkMap(v, mappingFn, path.concat(idx))\n    })\n  }\n\n  if (isRecord(value)) {\n    // Handle Portable Text in a faster way\n    if (value._type === 'block' || value._type === 'span') {\n      const result = {...value}\n      if (value._type === 'block') {\n        result.children = walkMap(value.children, mappingFn, path.concat('children'))\n      } else if (value._type === 'span') {\n        result.text = walkMap(value.text, mappingFn, path.concat('text'))\n      }\n      return result\n    }\n\n    return Object.fromEntries(\n      Object.entries(value).map(([k, v]) => [k, walkMap(v, mappingFn, path.concat(k))]),\n    )\n  }\n\n  return mappingFn(value, path)\n}\n","import type {ContentSourceMap} from '@sanity/client/csm'\n\nimport {parseJsonPath} from '../csm/jsonPath'\nimport {resolveMapping} from '../csm/resolveMapping'\nimport {walkMap} from '../csm/walkMap'\nimport type {Encoder} from './types'\n\n/**\n * @internal\n */\nexport function encodeIntoResult<Result>(\n  result: Result,\n  csm: ContentSourceMap,\n  encoder: Encoder,\n): Result {\n  return walkMap(result, (value, path) => {\n    // Only map strings, we could extend this in the future to support other types like integers...\n    if (typeof value !== 'string') {\n      return value\n    }\n\n    const resolveMappingResult = resolveMapping(path, csm)\n    if (!resolveMappingResult) {\n      return value\n    }\n\n    const {mapping, matchedPath} = resolveMappingResult\n    if (mapping.type !== 'value') {\n      return value\n    }\n\n    if (mapping.source.type !== 'documentValue') {\n      return value\n    }\n\n    const sourceDocument = csm.documents[mapping.source.document!]\n    const sourcePath = csm.paths[mapping.source.path]\n\n    const matchPathSegments = parseJsonPath(matchedPath)\n    const sourcePathSegments = parseJsonPath(sourcePath)\n    const fullSourceSegments = sourcePathSegments.concat(path.slice(matchPathSegments.length))\n\n    return encoder({\n      sourcePath: fullSourceSegments,\n      sourceDocument,\n      resultPath: path,\n      value,\n    })\n  }) as Result\n}\n","// nominal/opaque type hack\ntype Opaque<T, K> = T & {__opaqueId__: K}\n\n/** @internal */\nexport type DraftId = Opaque<string, 'draftId'>\n\n/** @internal */\nexport type PublishedId = Opaque<string, 'publishedId'>\n\n/** @internal */\nexport const DRAFTS_FOLDER = 'drafts'\n\n/** @internal */\nexport const VERSION_FOLDER = 'versions'\n\nconst PATH_SEPARATOR = '.'\nconst DRAFTS_PREFIX = `${DRAFTS_FOLDER}${PATH_SEPARATOR}`\nconst VERSION_PREFIX = `${VERSION_FOLDER}${PATH_SEPARATOR}`\n\n/** @internal */\nexport function isDraftId(id: string): id is DraftId {\n  return id.startsWith(DRAFTS_PREFIX)\n}\n\n/** @internal */\nexport function isVersionId(id: string): boolean {\n  return id.startsWith(VERSION_PREFIX)\n}\n\n/** @internal */\nexport function isPublishedId(id: string): id is PublishedId {\n  return !isDraftId(id) && !isVersionId(id)\n}\n\n/** @internal */\nexport function getDraftId(id: string): DraftId {\n  if (isVersionId(id)) {\n    const publishedId = getPublishedId(id)\n    return (DRAFTS_PREFIX + publishedId) as DraftId\n  }\n\n  return isDraftId(id) ? id : ((DRAFTS_PREFIX + id) as DraftId)\n}\n\n/**  @internal */\nexport function getVersionId(id: string, version: string): string {\n  if (version === 'drafts' || version === 'published') {\n    throw new Error('Version can not be \"published\" or \"drafts\"')\n  }\n\n  return `${VERSION_PREFIX}${version}${PATH_SEPARATOR}${getPublishedId(id)}`\n}\n\n/**\n *  @internal\n *  Given an id, returns the versionId if it exists.\n *  e.g. `versions.summer-drop.foo` = `summer-drop`\n *  e.g. `drafts.foo` = `undefined`\n *  e.g. `foo` = `undefined`\n */\nexport function getVersionFromId(id: string): string | undefined {\n  if (!isVersionId(id)) return undefined\n  // eslint-disable-next-line unused-imports/no-unused-vars\n  const [_versionPrefix, versionId, ..._publishedId] = id.split(PATH_SEPARATOR)\n\n  return versionId\n}\n\n/** @internal */\nexport function getPublishedId(id: string): PublishedId {\n  if (isVersionId(id)) {\n    // make sure to only remove the versions prefix and the bundle name\n    return id.split(PATH_SEPARATOR).slice(2).join(PATH_SEPARATOR) as PublishedId as PublishedId\n  }\n\n  if (isDraftId(id)) {\n    return id.slice(DRAFTS_PREFIX.length) as PublishedId\n  }\n\n  return id as PublishedId\n}\n","import {getPublishedId, getVersionFromId, isPublishedId, isVersionId} from './draftUtils'\nimport {jsonPathToStudioPath} from './jsonPath'\nimport * as studioPath from './studioPath'\nimport type {CreateEditUrlOptions, EditIntentUrl, StudioBaseUrl} from './types'\n\n/** @internal */\nexport function createEditUrl(options: CreateEditUrlOptions): `${StudioBaseUrl}${EditIntentUrl}` {\n  const {\n    baseUrl,\n    workspace: _workspace = 'default',\n    tool: _tool = 'default',\n    id: _id,\n    type,\n    path,\n    projectId,\n    dataset,\n  } = options\n\n  if (!baseUrl) {\n    throw new Error('baseUrl is required')\n  }\n  if (!path) {\n    throw new Error('path is required')\n  }\n  if (!_id) {\n    throw new Error('id is required')\n  }\n  if (baseUrl !== '/' && baseUrl.endsWith('/')) {\n    throw new Error('baseUrl must not end with a slash')\n  }\n\n  const workspace = _workspace === 'default' ? undefined : _workspace\n  const tool = _tool === 'default' ? undefined : _tool\n  const id = getPublishedId(_id)\n  const stringifiedPath = Array.isArray(path)\n    ? studioPath.toString(jsonPathToStudioPath(path))\n    : path\n\n  // eslint-disable-next-line no-warning-comments\n  // @TODO Using searchParams as a temporary workaround until `@sanity/overlays` can decode state from the path reliably\n  const searchParams = new URLSearchParams({\n    baseUrl,\n    id,\n    type,\n    path: stringifiedPath,\n  })\n  if (workspace) {\n    searchParams.set('workspace', workspace)\n  }\n  if (tool) {\n    searchParams.set('tool', tool)\n  }\n  if (projectId) {\n    searchParams.set('projectId', projectId)\n  }\n  if (dataset) {\n    searchParams.set('dataset', dataset)\n  }\n  if (isPublishedId(_id)) {\n    searchParams.set('perspective', 'published')\n  } else if (isVersionId(_id)) {\n    const versionId = getVersionFromId(_id)!\n    searchParams.set('perspective', versionId)\n  }\n\n  const segments = [baseUrl === '/' ? '' : baseUrl]\n  if (workspace) {\n    segments.push(workspace)\n  }\n  const routerParams = [\n    'mode=presentation',\n    `id=${id}`,\n    `type=${type}`,\n    `path=${encodeURIComponent(stringifiedPath)}`,\n  ]\n  if (tool) {\n    routerParams.push(`tool=${tool}`)\n  }\n  segments.push('intent', 'edit', `${routerParams.join(';')}?${searchParams}`)\n  return segments.join('/') as unknown as `${StudioBaseUrl}${EditIntentUrl}`\n}\n","import {parseJsonPath} from './jsonPath'\nimport {resolveMapping} from './resolveMapping'\nimport type {\n  CreateEditUrlOptions,\n  ResolveEditInfoOptions,\n  StudioBaseRoute,\n  StudioBaseUrl,\n  StudioUrl,\n} from './types'\n\n/** @internal */\nexport function resolveEditInfo(options: ResolveEditInfoOptions): CreateEditUrlOptions | undefined {\n  const {resultSourceMap: csm, resultPath} = options\n  const {mapping, pathSuffix} = resolveMapping(resultPath, csm) || {}\n\n  if (!mapping) {\n    // console.warn('no mapping for path', { path: resultPath, sourceMap: csm })\n    return undefined\n  }\n\n  if (mapping.source.type === 'literal') {\n    return undefined\n  }\n\n  if (mapping.source.type === 'unknown') {\n    return undefined\n  }\n\n  const sourceDoc = csm.documents[mapping.source.document]\n  const sourcePath = csm.paths[mapping.source.path]\n\n  if (sourceDoc && sourcePath) {\n    const {baseUrl, workspace, tool} = resolveStudioBaseRoute(\n      typeof options.studioUrl === 'function' ? options.studioUrl(sourceDoc) : options.studioUrl,\n    )\n    if (!baseUrl) return undefined\n    const {_id, _type, _projectId, _dataset} = sourceDoc\n    return {\n      baseUrl,\n      workspace,\n      tool,\n      id: _id,\n      type: _type,\n      path: parseJsonPath(sourcePath + pathSuffix),\n      projectId: _projectId,\n      dataset: _dataset,\n    } satisfies CreateEditUrlOptions\n  }\n\n  return undefined\n}\n\n/** @internal */\nexport function resolveStudioBaseRoute(studioUrl: StudioUrl): StudioBaseRoute {\n  let baseUrl: StudioBaseUrl = typeof studioUrl === 'string' ? studioUrl : studioUrl.baseUrl\n  if (baseUrl !== '/') {\n    baseUrl = baseUrl.replace(/\\/$/, '')\n  }\n  if (typeof studioUrl === 'string') {\n    return {baseUrl}\n  }\n  return {...studioUrl, baseUrl}\n}\n","import type {ContentSourceMapParsedPath, FilterDefault} from './types'\n\nexport const filterDefault: FilterDefault = ({sourcePath, resultPath, value}) => {\n  // Skips encoding on URL or Date strings, similar to the `skip: 'auto'` parameter in vercelStegaCombine()\n  if (isValidDate(value) || isValidURL(value)) {\n    return false\n  }\n\n  const endPath = sourcePath.at(-1)\n  // Never encode slugs\n  if (sourcePath.at(-2) === 'slug' && endPath === 'current') {\n    return false\n  }\n\n  // Skip underscored keys, and strings that end with `Id`, needs better heuristics but it works for now\n  if (typeof endPath === 'string' && (endPath.startsWith('_') || endPath.endsWith('Id'))) {\n    return false\n  }\n\n  // Don't encode into anything that is suggested it'll render for SEO in meta tags\n  if (\n    sourcePath.some(\n      (path) => path === 'meta' || path === 'metadata' || path === 'openGraph' || path === 'seo',\n    )\n  ) {\n    return false\n  }\n\n  // If the sourcePath or resultPath contains something that sounds like a type, like iconType, we skip encoding, as it's most\n  // of the time used for logic that breaks if it contains stega characters\n  if (hasTypeLike(sourcePath) || hasTypeLike(resultPath)) {\n    return false\n  }\n\n  // Finally, we ignore a bunch of paths that are typically used for page building\n  if (typeof endPath === 'string' && denylist.has(endPath)) {\n    return false\n  }\n\n  return true\n}\n\nconst denylist = new Set([\n  'color',\n  'colour',\n  'currency',\n  'email',\n  'format',\n  'gid',\n  'hex',\n  'href',\n  'hsl',\n  'hsla',\n  'icon',\n  'id',\n  'index',\n  'key',\n  'language',\n  'layout',\n  'link',\n  'linkAction',\n  'locale',\n  'lqip',\n  'page',\n  'path',\n  'ref',\n  'rgb',\n  'rgba',\n  'route',\n  'secret',\n  'slug',\n  'status',\n  'tag',\n  'template',\n  'theme',\n  'type',\n  'textTheme',\n  'unit',\n  'url',\n  'username',\n  'variant',\n  'website',\n])\n\nfunction isValidDate(dateString: string) {\n  return /^\\d{4}-\\d{2}-\\d{2}/.test(dateString) ? Boolean(Date.parse(dateString)) : false\n}\n\nconst allowedProtocols = new Set([\n  'app:',\n  'data:',\n  'discord:',\n  'file:',\n  'ftp:',\n  'ftps:',\n  'geo:',\n  'http:',\n  'https:',\n  'imap:',\n  'javascript:',\n  'magnet:',\n  'mailto:',\n  'maps:',\n  'ms-excel:',\n  'ms-powerpoint:',\n  'ms-word:',\n  'slack:',\n  'sms:',\n  'spotify:',\n  'steam:',\n  'teams:',\n  'tel:',\n  'vscode:',\n  'zoom:',\n])\n\nfunction isValidURL(url: string) {\n  try {\n    const {protocol} = new URL(url, url.startsWith('/') ? 'https://acme.com' : undefined)\n    return allowedProtocols.has(protocol) || protocol.startsWith('web+')\n  } catch {\n    return false\n  }\n}\n\nfunction hasTypeLike(path: ContentSourceMapParsedPath): boolean {\n  return path.some((segment) => typeof segment === 'string' && segment.match(/type/i) !== null)\n}\n","import {vercelStegaCombine} from '@vercel/stega'\n\nimport {createEditUrl} from '../csm/createEditUrl'\nimport {jsonPathToStudioPath} from '../csm/jsonPath'\nimport {resolveStudioBaseRoute} from '../csm/resolveEditInfo'\nimport {reKeySegment, toString as studioPathToString} from '../csm/studioPath'\nimport {encodeIntoResult} from './encodeIntoResult'\nimport {filterDefault} from './filterDefault'\nimport {\n  type ContentSourceMap,\n  type ContentSourceMapParsedPath,\n  type InitializedStegaConfig,\n} from './types'\n\nconst TRUNCATE_LENGTH = 20\n\n/**\n * Uses `@vercel/stega` to embed edit info JSON into strings in your query result.\n * The JSON payloads are added using invisible characters so they don't show up visually.\n * The edit info is generated from the Content Source Map (CSM) that is returned from Sanity for the query.\n * @public\n */\nexport function stegaEncodeSourceMap<Result = unknown>(\n  result: Result,\n  resultSourceMap: ContentSourceMap | undefined,\n  config: InitializedStegaConfig,\n): Result {\n  const {filter, logger, enabled} = config\n  if (!enabled) {\n    const msg = \"config.enabled must be true, don't call this function otherwise\"\n    logger?.error?.(`[@sanity/client]: ${msg}`, {result, resultSourceMap, config})\n    throw new TypeError(msg)\n  }\n\n  if (!resultSourceMap) {\n    logger?.error?.('[@sanity/client]: Missing Content Source Map from response body', {\n      result,\n      resultSourceMap,\n      config,\n    })\n    return result\n  }\n\n  if (!config.studioUrl) {\n    const msg = 'config.studioUrl must be defined'\n    logger?.error?.(`[@sanity/client]: ${msg}`, {result, resultSourceMap, config})\n    throw new TypeError(msg)\n  }\n\n  const report: Record<'encoded' | 'skipped', {path: string; length: number; value: string}[]> = {\n    encoded: [],\n    skipped: [],\n  }\n\n  const resultWithStega = encodeIntoResult(\n    result,\n    resultSourceMap,\n    ({sourcePath, sourceDocument, resultPath, value}) => {\n      // Allow userland to control when to opt-out of encoding\n      if (\n        (typeof filter === 'function'\n          ? filter({sourcePath, resultPath, filterDefault, sourceDocument, value})\n          : filterDefault({sourcePath, resultPath, filterDefault, sourceDocument, value})) === false\n      ) {\n        if (logger) {\n          report.skipped.push({\n            path: prettyPathForLogging(sourcePath),\n            value: `${value.slice(0, TRUNCATE_LENGTH)}${\n              value.length > TRUNCATE_LENGTH ? '...' : ''\n            }`,\n            length: value.length,\n          })\n        }\n        return value\n      }\n\n      if (logger) {\n        report.encoded.push({\n          path: prettyPathForLogging(sourcePath),\n          value: `${value.slice(0, TRUNCATE_LENGTH)}${value.length > TRUNCATE_LENGTH ? '...' : ''}`,\n          length: value.length,\n        })\n      }\n\n      const {baseUrl, workspace, tool} = resolveStudioBaseRoute(\n        typeof config.studioUrl === 'function'\n          ? config.studioUrl(sourceDocument)\n          : config.studioUrl!,\n      )\n      if (!baseUrl) return value\n      const {_id: id, _type: type, _projectId: projectId, _dataset: dataset} = sourceDocument\n\n      return vercelStegaCombine(\n        value,\n        {\n          origin: 'sanity.io',\n          href: createEditUrl({\n            baseUrl,\n            workspace,\n            tool,\n            id,\n            type,\n            path: sourcePath,\n            ...(!config.omitCrossDatasetReferenceData && {dataset, projectId}),\n          }),\n        },\n        // We use custom logic to determine if we should skip encoding\n        false,\n      )\n    },\n  )\n\n  if (logger) {\n    const isSkipping = report.skipped.length\n    const isEncoding = report.encoded.length\n    if (isSkipping || isEncoding) {\n      ;(logger?.groupCollapsed || logger.log)?.('[@sanity/client]: Encoding source map into result')\n      logger.log?.(\n        `[@sanity/client]: Paths encoded: ${report.encoded.length}, skipped: ${report.skipped.length}`,\n      )\n    }\n    if (report.encoded.length > 0) {\n      logger?.log?.(`[@sanity/client]: Table of encoded paths`)\n      ;(logger?.table || logger.log)?.(report.encoded)\n    }\n    if (report.skipped.length > 0) {\n      const skipped = new Set<string>()\n      for (const {path} of report.skipped) {\n        skipped.add(path.replace(reKeySegment, '0').replace(/\\[\\d+\\]/g, '[]'))\n      }\n      logger?.log?.(`[@sanity/client]: List of skipped paths`, [...skipped.values()])\n    }\n\n    if (isSkipping || isEncoding) {\n      logger?.groupEnd?.()\n    }\n  }\n\n  return resultWithStega\n}\n\nfunction prettyPathForLogging(path: ContentSourceMapParsedPath): string {\n  return studioPathToString(jsonPathToStudioPath(path))\n}\n"],"names":["reKeySegment","isKeySegment","segment","toString","path","target","i","segmentType","from","to","ESCAPE","UNESCAPE","jsonPath","match","parseJsonPath","parsed","parseRe","key","m","_key","jsonPathToStudioPath","jsonPathToMappingPath","resolveMapping","resultPath","csm","resultMappingPath","mappings","key1","key2","matchedPath","mapping","pathSuffix","isArray","value","walkMap","mappingFn","v","idx","isRecord","result","k","encodeIntoResult","encoder","resolveMappingResult","sourceDocument","sourcePath","matchPathSegments","fullSourceSegments","DRAFTS_FOLDER","VERSION_FOLDER","PATH_SEPARATOR","DRAFTS_PREFIX","VERSION_PREFIX","isDraftId","id","isVersionId","isPublishedId","getVersionFromId","_versionPrefix","versionId","_publishedId","getPublishedId","createEditUrl","options","baseUrl","_workspace","_tool","_id","type","projectId","dataset","workspace","tool","stringifiedPath","studioPath.toString","searchParams","segments","routerParams","resolveStudioBaseRoute","studioUrl","filterDefault","isValidDate","isValidURL","endPath","hasTypeLike","denylist","dateString","allowedProtocols","url","protocol","TRUNCATE_LENGTH","stegaEncodeSourceMap","resultSourceMap","config","filter","logger","enabled","msg","report","resultWithStega","prettyPathForLogging","vercelStegaCombine","isSkipping","isEncoding","skipped","studioPathToString"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10]}