{"version":3,"file":"index3-Dc_3Dgi7.js","sources":["../../../../../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/src/internal/operators/pairwise.ts","../../../../../../packages/sanity/src/structure/structureResolvers/PaneResolutionError.ts","../../../../../../packages/sanity/src/structure/structureResolvers/assignId.ts","../../../../../../packages/sanity/src/structure/structureResolvers/createPaneResolver.ts","../../../../../../packages/sanity/src/structure/structureResolvers/memoBind.ts","../../../../../../packages/sanity/src/structure/structureResolvers/resolveIntent.ts","../../../../../../packages/sanity/src/structure/structureResolvers/createResolvedPaneNodeStream.ts","../../../../../../packages/sanity/src/structure/structureResolvers/useResolvedPanes.ts","../../../../../../packages/sanity/src/structure/components/structureTool/intentResolver/utils.ts","../../../../../../packages/sanity/src/structure/components/structureTool/intentResolver/IntentResolver.tsx","../../../../../../packages/sanity/src/structure/components/structureTool/StructureError.tsx","../../../../../../packages/sanity/src/structure/components/structureTool/NoDocumentTypesScreen.tsx","../../../../../../packages/sanity/src/structure/components/structureTool/StructureTitle.tsx","../../../../../../packages/sanity/src/structure/components/structureTool/StructureTool.tsx","../../../../../../packages/sanity/src/structure/components/structureTool/StructureToolBoundary.tsx"],"sourcesContent":["import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * ![](pairwise.png)\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * ## Example\n *\n * On every click (starting from the second), emit the relative distance to the previous click\n *\n * ```ts\n * import { fromEvent, pairwise, map } from 'rxjs';\n *\n * const clicks = fromEvent<PointerEvent>(document, 'click');\n * const pairs = clicks.pipe(pairwise());\n * const distance = pairs.pipe(\n *   map(([first, second]) => {\n *     const x0 = first.clientX;\n *     const y0 = first.clientY;\n *     const x1 = second.clientX;\n *     const y1 = second.clientY;\n *     return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n *   })\n * );\n *\n * distance.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return A function that returns an Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return operate((source, subscriber) => {\n    let prev: T;\n    let hasPrev = false;\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value) => {\n        const p = prev;\n        prev = value;\n        hasPrev && subscriber.next([p, value]);\n        hasPrev = true;\n      })\n    );\n  });\n}\n","import {type RouterPaneSiblingContext} from '../types'\n\nexport interface PaneResolutionErrorOptions {\n  message: string\n  context?: RouterPaneSiblingContext\n  helpId?: string\n  cause?: Error\n}\n\n/**\n * An error thrown during pane resolving. This error is meant to be bubbled up\n * through react and handled in an error boundary. It includes a `cause`\n * property which is the original error caught\n */\nexport class PaneResolutionError extends Error {\n  cause: Error | undefined\n  context: RouterPaneSiblingContext | undefined\n  helpId: string | undefined\n\n  constructor({message, context, helpId, cause}: PaneResolutionErrorOptions) {\n    super(message)\n    this.name = 'PaneResolutionError'\n    this.context = context\n    this.helpId = helpId\n    this.cause = cause\n  }\n}\n","import {nanoid} from 'nanoid'\n\n// `WeakMap`s require the first type param to extend `object`\nconst randomIdCache = new WeakMap<object, string>()\n\n/**\n * given an object, this function randomly generates an ID and returns it. this\n * result is then saved in a WeakMap so subsequent requests for the same object\n * will receive the same ID\n */\nexport function assignId(obj: object): string {\n  const cachedValue = randomIdCache.get(obj)\n  if (cachedValue) return cachedValue\n\n  const id = nanoid()\n  randomIdCache.set(obj, id)\n  return id\n}\n","import {from, isObservable, type Observable, of as observableOf} from 'rxjs'\nimport {publishReplay, refCount, switchMap} from 'rxjs/operators'\nimport {isRecord} from 'sanity'\n\nimport {type PaneNode, type RouterPaneSiblingContext, type UnresolvedPaneNode} from '../types'\nimport {PaneResolutionError} from './PaneResolutionError'\n\ninterface Serializable {\n  serialize: (...args: never[]) => unknown\n}\n\nconst isPromise = (thing: any): thing is PromiseLike<unknown> => {\n  return !!thing && typeof thing?.then === 'function'\n}\nconst isSerializable = (thing: unknown): thing is Serializable => {\n  if (!isRecord(thing)) return false\n  return typeof thing.serialize === 'function'\n}\n\n/**\n * The signature of the function used to take an `UnresolvedPaneNode` and turn\n * it into an `Observable<PaneNode>`.\n */\nexport type PaneResolver = (\n  unresolvedPane: UnresolvedPaneNode | undefined,\n  context: RouterPaneSiblingContext,\n  flatIndex: number,\n) => Observable<PaneNode>\n\nexport type PaneResolverMiddleware = (paneResolveFn: PaneResolver) => PaneResolver\n\nconst rethrowWithPaneResolutionErrors: PaneResolverMiddleware =\n  (next) => (unresolvedPane, context, flatIndex) => {\n    try {\n      return next(unresolvedPane, context, flatIndex)\n    } catch (e) {\n      // re-throw errors that are already `PaneResolutionError`s\n      if (e instanceof PaneResolutionError) {\n        throw e\n      }\n\n      // anything else, wrap with `PaneResolutionError` and set the underlying\n      // error as a the `cause`\n      throw new PaneResolutionError({\n        message: typeof e?.message === 'string' ? e.message : '',\n        context,\n        cause: e,\n      })\n    }\n  }\n\nconst wrapWithPublishReplay: PaneResolverMiddleware =\n  (next) =>\n  (...args) => {\n    return next(...args).pipe(\n      // need to add publishReplay + refCount to ensure new subscribers always\n      // get an emission. without this, memoized observables may get stuck\n      // waiting for their first emissions resulting in a loading pane\n      publishReplay(1),\n      refCount(),\n    )\n  }\n\nexport function createPaneResolver(middleware: PaneResolverMiddleware): PaneResolver {\n  // note: this API includes a middleware/wrapper function because the function\n  // is recursive. we want to call the wrapped version of the function always\n  // (even inside of nested calls) so the identifier invoked for the recursion\n  // should be the wrapped version\n  const resolvePane = rethrowWithPaneResolutionErrors(\n    wrapWithPublishReplay(\n      middleware((unresolvedPane, context, flatIndex) => {\n        if (!unresolvedPane) {\n          throw new PaneResolutionError({\n            message: 'Pane returned no child',\n            context,\n            helpId: 'structure-item-returned-no-child',\n          })\n        }\n\n        if (isPromise(unresolvedPane) || isObservable(unresolvedPane)) {\n          return from(unresolvedPane).pipe(\n            switchMap((result) => resolvePane(result, context, flatIndex)),\n          )\n        }\n\n        if (isSerializable(unresolvedPane)) {\n          return resolvePane(unresolvedPane.serialize(context), context, flatIndex)\n        }\n\n        if (typeof unresolvedPane === 'function') {\n          return resolvePane(unresolvedPane(context.id, context), context, flatIndex)\n        }\n\n        return observableOf(unresolvedPane)\n      }),\n    ),\n  )\n\n  return resolvePane\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-function-type */\n\n// `WeakMap`s require the first type param to extend `object`\nconst bindCache = new WeakMap<object, Map<string, Function>>()\n\n/**\n * An alternative to `obj.method.bind(obj)` that utilizes a weakmap to return\n * the same memory reference for sequent binds.\n */\nexport function memoBind<\n  T extends object,\n  K extends keyof {[P in keyof T]: T[P] extends Function ? T[P] : never},\n>(obj: T, methodKey: K): T[K]\nexport function memoBind(obj: Record<string, unknown>, methodKey: string): Function {\n  const boundMethods = bindCache.get(obj) || new Map<string, Function>()\n  if (boundMethods) {\n    const bound = boundMethods.get(methodKey)\n    if (bound) return bound\n  }\n\n  const method = obj[methodKey]\n\n  if (typeof method !== 'function') {\n    throw new Error(\n      `Expected property \\`${methodKey}\\` to be a function but got ${typeof method} instead.`,\n    )\n  }\n\n  const bound = method.bind(obj)\n  boundMethods.set(methodKey, bound)\n  bindCache.set(obj, boundMethods)\n\n  return bound\n}\n","import {omit} from 'lodash'\nimport {firstValueFrom, type Observable} from 'rxjs'\n\nimport {type StructureContext} from '../structureBuilder'\nimport {\n  type PaneNode,\n  type RouterPanes,\n  type RouterPaneSiblingContext,\n  type UnresolvedPaneNode,\n} from '../types'\nimport {assignId} from './assignId'\nimport {createPaneResolver, type PaneResolverMiddleware} from './createPaneResolver'\nimport {memoBind} from './memoBind'\n\ninterface TraverseOptions {\n  unresolvedPane: UnresolvedPaneNode | undefined\n  intent: string\n  params: {type: string; id: string; [key: string]: string | undefined}\n  payload: unknown\n  parent: PaneNode | null\n  path: string[]\n  currentId: string\n  flatIndex: number\n  levelIndex: number\n  structureContext: StructureContext\n}\n\nexport interface ResolveIntentOptions {\n  rootPaneNode?: UnresolvedPaneNode\n  intent: string\n  params: {type: string; id: string; [key: string]: string | undefined}\n  payload: unknown\n  structureContext: StructureContext\n}\n\n/**\n * Resolves an intent request using breadth first search. If a match is not\n * found, the intent will resolve to the fallback editor.\n *\n * A match is found if:\n * 1. the `PaneNode` is of type `document` and the its ID matches the intent ID\n * 2. the `PaneNode` is of type `documentList` and the `schemaTypeName` matches\n * 3. the `PaneNode`'s `canHandleIntent` method returns true\n *\n * If a `PaneNode` of type `list` is found, it will be searched for a match.\n *\n * @see PaneNode\n */\nexport async function resolveIntent(options: ResolveIntentOptions): Promise<RouterPanes> {\n  const resolvedPaneCache = new Map<string, Observable<PaneNode>>()\n\n  // this is a simple version of the memoizer in `createResolvedPaneNodeStream`\n  const memoize: PaneResolverMiddleware = (nextFn) => (unresolvedPane, context, flatIndex) => {\n    const key = unresolvedPane && `${assignId(unresolvedPane)}-${context.path.join('__')}`\n    const cachedResolvedPane = key && resolvedPaneCache.get(key)\n    if (cachedResolvedPane) return cachedResolvedPane\n\n    const result = nextFn(unresolvedPane, context, flatIndex)\n    if (key) resolvedPaneCache.set(key, result)\n    return result\n  }\n\n  const resolvePane = createPaneResolver(memoize)\n\n  const fallbackEditorPanes: RouterPanes = [\n    [\n      {\n        id: `__edit__${options.params.id}`,\n        params: {...omit(options.params, ['id']), type: options.params.type},\n        payload: options.payload,\n      },\n    ],\n  ]\n\n  async function traverse({\n    currentId,\n    flatIndex,\n    intent,\n    params,\n    parent,\n    path,\n    payload,\n    unresolvedPane,\n    levelIndex,\n    structureContext,\n  }: TraverseOptions): Promise<\n    Array<{panes: RouterPanes; depthIndex: number; levelIndex: number}>\n  > {\n    if (!unresolvedPane) return []\n\n    const {id: targetId, type: schemaTypeName, ...otherParams} = params\n    const context: RouterPaneSiblingContext = {\n      id: currentId,\n      splitIndex: 0,\n      parent,\n      path,\n      index: flatIndex,\n      params: {},\n      payload: undefined,\n      structureContext,\n    }\n    const resolvedPane = await firstValueFrom(resolvePane(unresolvedPane, context, flatIndex))\n\n    // if the resolved pane is a document pane and the pane's ID matches then\n    // resolve the intent to the current path\n    if (resolvedPane.type === 'document' && resolvedPane.id === targetId) {\n      return [\n        {\n          panes: [\n            ...path.slice(0, path.length - 1).map((i) => [{id: i}]),\n            [{id: targetId, params: otherParams, payload}],\n          ],\n          depthIndex: path.length,\n          levelIndex,\n        },\n      ]\n    }\n\n    // NOTE: if you update this logic, please also update the similar handler in\n    // `getIntentState.ts`\n    if (\n      // if the resolve pane's `canHandleIntent` returns true, then resolve\n      resolvedPane.canHandleIntent?.(intent, params, {\n        pane: resolvedPane,\n        index: flatIndex,\n      }) ||\n      // if the pane's `canHandleIntent` did not return true, then match against\n      // this default case. we will resolve the intent if:\n      (resolvedPane.type === 'documentList' &&\n        // 1. the schema type matches (this required for the document to render)\n        resolvedPane.schemaTypeName === schemaTypeName &&\n        // 2. the filter is the default filter.\n        //\n        // NOTE: this case is to prevent false positive matches where the user\n        // has configured a more specific filter for a particular type. In that\n        // case, the user can implement their own `canHandleIntent` function\n        resolvedPane.options.filter === '_type == $type')\n    ) {\n      return [\n        {\n          panes: [\n            // map the current path to router panes\n            ...path.map((id) => [{id}]),\n            // then augment with the intents IDs and params\n            [{id: params.id, params: otherParams, payload}],\n          ],\n          depthIndex: path.length,\n          levelIndex,\n        },\n      ]\n    }\n\n    if (resolvedPane.type === 'list' && resolvedPane.child && resolvedPane.items) {\n      return (\n        await Promise.all(\n          resolvedPane.items.map((item, nextLevelIndex) => {\n            if (item.type === 'divider') return Promise.resolve([])\n\n            return traverse({\n              currentId: item._id || item.id,\n              flatIndex: flatIndex + 1,\n              intent,\n              params,\n              parent: resolvedPane,\n              path: [...path, item.id],\n              payload,\n              unresolvedPane:\n                typeof resolvedPane.child === 'function'\n                  ? memoBind(resolvedPane, 'child')\n                  : resolvedPane.child,\n              levelIndex: nextLevelIndex,\n              structureContext,\n            })\n          }),\n        )\n      ).flat()\n    }\n\n    return []\n  }\n\n  const matchingPanes = await traverse({\n    currentId: 'root',\n    flatIndex: 0,\n    levelIndex: 0,\n    intent: options.intent,\n    params: options.params,\n    parent: null,\n    path: [],\n    payload: options.payload,\n    unresolvedPane: options.rootPaneNode,\n    structureContext: options.structureContext,\n  })\n\n  const closestPaneToRoot = matchingPanes.sort((a, b) => {\n    // break ties with the level index\n    if (a.depthIndex === b.depthIndex) return a.levelIndex - b.levelIndex\n    return a.depthIndex - b.depthIndex\n  })[0]\n\n  if (closestPaneToRoot) {\n    return closestPaneToRoot.panes\n  }\n\n  return fallbackEditorPanes\n}\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {isEqual} from 'lodash'\nimport {concat, NEVER, type Observable, of as observableOf} from 'rxjs'\nimport {distinctUntilChanged, map, pairwise, scan, startWith, switchMap} from 'rxjs/operators'\n\nimport {type StructureContext} from '../structureBuilder'\nimport {\n  type DocumentPaneNode,\n  type PaneNode,\n  type PaneNodeResolver,\n  type RouterPanes,\n  type RouterPaneSibling,\n  type RouterPaneSiblingContext,\n  type UnresolvedPaneNode,\n} from '../types'\nimport {assignId} from './assignId'\nimport {\n  createPaneResolver,\n  type PaneResolver,\n  type PaneResolverMiddleware,\n} from './createPaneResolver'\nimport {memoBind} from './memoBind'\nimport {PaneResolutionError} from './PaneResolutionError'\n\n/**\n * the fallback editor child that is implicitly inserted into the structure tree\n * if the id starts with `__edit__`\n */\nconst fallbackEditorChild: PaneNodeResolver = (nodeId, context): DocumentPaneNode => {\n  const id = nodeId.replace(/^__edit__/, '')\n  const {\n    params,\n    payload,\n    structureContext: {resolveDocumentNode},\n  } = context\n  const {type, template} = params\n\n  if (!type) {\n    throw new Error(\n      `Document type for document with ID ${id} was not provided in the router params.`,\n    )\n  }\n\n  let defaultDocumentBuilder = resolveDocumentNode({schemaType: type, documentId: id}).id('editor')\n\n  if (template) {\n    defaultDocumentBuilder = defaultDocumentBuilder.initialValueTemplate(\n      template,\n      payload as {[key: string]: unknown},\n    )\n  }\n\n  return defaultDocumentBuilder.serialize() as DocumentPaneNode\n}\n\n/**\n * takes in a `RouterPaneSiblingContext` and returns a normalized string\n * representation that can be used for comparisons\n */\nfunction hashContext(context: RouterPaneSiblingContext): string {\n  return `contextHash(${JSON.stringify({\n    id: context.id,\n    parentId: parent && assignId(parent),\n    path: context.path,\n    index: context.index,\n    splitIndex: context.splitIndex,\n    serializeOptionsIndex: context.serializeOptions?.index,\n    serializeOptionsPath: context.serializeOptions?.path,\n  })})`\n}\n\n/**\n * takes in `ResolvedPaneMeta` and returns a normalized string representation\n * that can be used for comparisons\n */\nconst hashResolvedPaneMeta = (meta: ResolvedPaneMeta): string => {\n  const normalized = {\n    type: meta.type,\n    id: meta.routerPaneSibling.id,\n    params: meta.routerPaneSibling.params || {},\n    payload: meta.routerPaneSibling.payload || null,\n    flatIndex: meta.flatIndex,\n    groupIndex: meta.groupIndex,\n    siblingIndex: meta.siblingIndex,\n    path: meta.path,\n    paneNode: meta.type === 'resolvedMeta' ? assignId(meta.paneNode) : null,\n  }\n\n  return `metaHash(${JSON.stringify(normalized)})`\n}\n\n/**\n * Represents one flattened \"router pane\", including the source group and\n * sibling indexes.\n *\n * @see RouterPanes\n */\ninterface FlattenedRouterPane {\n  routerPaneSibling: RouterPaneSibling\n  flatIndex: number\n  groupIndex: number\n  siblingIndex: number\n}\n\n/**\n * The state of the accumulator used to store and manage memo cache state\n */\ninterface CacheState {\n  /**\n   * Holds the memoization results keyed by a combination of `assignId` and a\n   * context hash.\n   */\n  resolvedPaneCache: Map<string, Observable<PaneNode>>\n  /**\n   * Acts as a dictionary that stores cache keys by their flat index. This is\n   * used to clean up the cache between different branches in the pane\n   * structure.\n   *\n   * @see createResolvedPaneNodeStream look inside the `scan` where `wrapFn` is\n   * defined\n   */\n  cacheKeysByFlatIndex: Array<Set<string>>\n  /**\n   * The resulting memoized `PaneResolver` function. This function closes over\n   * the `resolvedPaneCache`.\n   */\n  resolvePane: PaneResolver\n  flattenedRouterPanes: FlattenedRouterPane[]\n}\n\nexport interface CreateResolvedPaneNodeStreamOptions {\n  /**\n   * an input stream of `RouterPanes`\n   * @see RouterPanes\n   */\n  routerPanesStream: Observable<RouterPanes>\n  /**\n   * any `UnresolvedPaneNode` (could be an observable, promise, pane resolver etc)\n   */\n  rootPaneNode: UnresolvedPaneNode\n  /** used primarily for testing */\n  initialCacheState?: CacheState\n\n  structureContext: StructureContext\n}\n\n/**\n * The result of pane resolving\n */\nexport type ResolvedPaneMeta = {\n  groupIndex: number\n  siblingIndex: number\n  flatIndex: number\n  routerPaneSibling: RouterPaneSibling\n  path: string[]\n} & ({type: 'loading'; paneNode: null} | {type: 'resolvedMeta'; paneNode: PaneNode})\n\ninterface ResolvePaneTreeOptions {\n  resolvePane: PaneResolver\n  flattenedRouterPanes: FlattenedRouterPane[]\n  unresolvedPane: UnresolvedPaneNode | undefined\n  parent: PaneNode | null\n  path: string[]\n  structureContext: StructureContext\n}\n\n/**\n * A recursive pane resolving function. Starts at one unresolved pane node and\n * continues until there is no more flattened router panes that can be used as\n * input to the unresolved panes.\n */\nfunction resolvePaneTree({\n  unresolvedPane,\n  flattenedRouterPanes,\n  parent,\n  path,\n  resolvePane,\n  structureContext,\n}: ResolvePaneTreeOptions): Observable<ResolvedPaneMeta[]> {\n  const [current, ...rest] = flattenedRouterPanes\n  const next = rest[0] as FlattenedRouterPane | undefined\n\n  const context: RouterPaneSiblingContext = {\n    id: current.routerPaneSibling.id,\n    splitIndex: current.siblingIndex,\n    parent,\n    path: [...path, current.routerPaneSibling.id],\n    index: current.flatIndex,\n    params: current.routerPaneSibling.params || {},\n    payload: current.routerPaneSibling.payload,\n    structureContext,\n  }\n\n  try {\n    return resolvePane(unresolvedPane, context, current.flatIndex).pipe(\n      // this switch map receives a resolved pane\n      switchMap((paneNode) => {\n        // we can create a `resolvedMeta` type using it\n        const resolvedPaneMeta: ResolvedPaneMeta = {\n          type: 'resolvedMeta',\n          ...current,\n          paneNode: paneNode,\n          path: context.path,\n        }\n\n        // for the other unresolved panes, we can create \"loading panes\"\n        const loadingPanes = rest.map((i, restIndex) => {\n          const loadingPanePath = [\n            ...context.path,\n            ...rest.slice(restIndex).map((_, currentIndex) => `[${i.flatIndex + currentIndex}]`),\n          ]\n\n          const loadingPane: ResolvedPaneMeta = {\n            type: 'loading',\n            path: loadingPanePath,\n            paneNode: null,\n            ...i,\n          }\n\n          return loadingPane\n        })\n\n        if (!rest.length) {\n          return observableOf([resolvedPaneMeta])\n        }\n\n        let nextStream\n\n        if (\n          // the fallback editor case\n          next?.routerPaneSibling.id.startsWith('__edit__')\n        ) {\n          nextStream = resolvePaneTree({\n            unresolvedPane: fallbackEditorChild,\n            flattenedRouterPanes: rest,\n            parent,\n            path: context.path,\n            resolvePane,\n            structureContext,\n          })\n        } else if (current.groupIndex === next?.groupIndex) {\n          // if the next flattened router pane has the same group index as the\n          // current flattened router pane, then the next flattened router pane\n          // belongs to the same group (i.e. it is a split pane)\n          nextStream = resolvePaneTree({\n            unresolvedPane,\n            flattenedRouterPanes: rest,\n            parent,\n            path,\n            resolvePane,\n            structureContext,\n          })\n        } else {\n          // normal children resolving\n          nextStream = resolvePaneTree({\n            unresolvedPane:\n              typeof paneNode.child === 'function'\n                ? (memoBind(paneNode, 'child') as PaneNodeResolver)\n                : paneNode.child,\n            flattenedRouterPanes: rest,\n            parent: paneNode,\n            path: context.path,\n            resolvePane,\n            structureContext,\n          })\n        }\n\n        return concat(\n          // we emit the loading panes first in a concat (this emits immediately)\n          observableOf([resolvedPaneMeta, ...loadingPanes]),\n          // then whenever the next stream is done, the results will be combined.\n          nextStream.pipe(map((nextResolvedPanes) => [resolvedPaneMeta, ...nextResolvedPanes])),\n        )\n      }),\n    )\n  } catch (e) {\n    if (e instanceof PaneResolutionError) {\n      if (e.context) {\n        console.warn(\n          `Pane resolution error at index ${e.context.index}${\n            e.context.splitIndex > 0 ? ` for split pane index ${e.context.splitIndex}` : ''\n          }: ${e.message}${e.helpId ? ` - see ${generateHelpUrl(e.helpId)}` : ''}`,\n          e,\n        )\n      }\n\n      if (e.helpId === 'structure-item-returned-no-child') {\n        // returning an observable of an empty array will remove loading panes\n        // note: this one intentionally does not throw\n        return observableOf([])\n      }\n    }\n\n    throw e\n  }\n}\n\n/**\n * Takes in a stream of `RouterPanes` and an unresolved root pane and returns\n * a stream of `ResolvedPaneMeta`\n */\nexport function createResolvedPaneNodeStream({\n  routerPanesStream,\n  rootPaneNode,\n  initialCacheState = {\n    cacheKeysByFlatIndex: [],\n    flattenedRouterPanes: [],\n    resolvedPaneCache: new Map(),\n    resolvePane: () => NEVER,\n  },\n  structureContext,\n}: CreateResolvedPaneNodeStreamOptions): Observable<ResolvedPaneMeta[]> {\n  const resolvedPanes$ = routerPanesStream.pipe(\n    // add in implicit \"root\" router pane\n    map((rawRouterPanes) => [[{id: 'root'}], ...rawRouterPanes]),\n    // create flattened router panes\n    map((routerPanes) => {\n      const flattenedRouterPanes: FlattenedRouterPane[] = routerPanes\n        .flatMap((routerPaneGroup, groupIndex) =>\n          routerPaneGroup.map((routerPaneSibling, siblingIndex) => ({\n            routerPaneSibling,\n            groupIndex,\n            siblingIndex,\n          })),\n        )\n        // add in the flat index\n        .map((i, index) => ({...i, flatIndex: index}))\n\n      return flattenedRouterPanes\n    }),\n    // calculate a \"diffIndex\" used for clearing the memo cache\n    startWith([] as FlattenedRouterPane[]),\n    pairwise(),\n    map(([prev, curr]) => {\n      for (let i = 0; i < curr.length; i++) {\n        const prevValue = prev[i]\n        const currValue = curr[i]\n\n        if (!isEqual(prevValue, currValue)) {\n          return {\n            flattenedRouterPanes: curr,\n            diffIndex: i,\n          }\n        }\n      }\n\n      return {\n        flattenedRouterPanes: curr,\n        diffIndex: curr.length,\n      }\n    }),\n    // create the memoized `resolvePane` function and manage the memo cache\n    scan((acc, next) => {\n      const {cacheKeysByFlatIndex, resolvedPaneCache} = acc\n      const {flattenedRouterPanes, diffIndex} = next\n\n      // use the `cacheKeysByFlatIndex` like a dictionary to find cache keys to\n      // and cache keys to delete\n      const beforeDiffIndex = cacheKeysByFlatIndex.slice(0, diffIndex + 1)\n      const afterDiffIndex = cacheKeysByFlatIndex.slice(diffIndex + 1)\n\n      const keysToKeep = new Set(beforeDiffIndex.flatMap((keySet) => Array.from(keySet)))\n      const keysToDelete = afterDiffIndex\n        .flatMap((keySet) => Array.from(keySet))\n        .filter((key) => !keysToKeep.has(key))\n\n      for (const key of keysToDelete) {\n        resolvedPaneCache.delete(key)\n      }\n\n      // create a memoizing pane resolver middleware that utilizes the cache\n      // maintained above. this keeps the cache from growing indefinitely\n      const memoize: PaneResolverMiddleware = (nextFn) => (unresolvedPane, context, flatIndex) => {\n        const key = unresolvedPane && `${assignId(unresolvedPane)}-${hashContext(context)}`\n        const cachedResolvedPane = key && resolvedPaneCache.get(key)\n        if (cachedResolvedPane) return cachedResolvedPane\n\n        const result = nextFn(unresolvedPane, context, flatIndex)\n        if (!key) return result\n\n        const cacheKeySet = cacheKeysByFlatIndex[flatIndex] || new Set()\n        cacheKeySet.add(key)\n        cacheKeysByFlatIndex[flatIndex] = cacheKeySet\n        resolvedPaneCache.set(key, result)\n        return result\n      }\n\n      return {\n        flattenedRouterPanes,\n        cacheKeysByFlatIndex,\n        resolvedPaneCache,\n        resolvePane: createPaneResolver(memoize),\n      }\n    }, initialCacheState),\n    // run the memoized, recursive resolving\n    switchMap(({flattenedRouterPanes, resolvePane}) =>\n      resolvePaneTree({\n        unresolvedPane: rootPaneNode,\n        flattenedRouterPanes,\n        parent: null,\n        path: [],\n        resolvePane,\n        structureContext,\n      }),\n    ),\n  )\n\n  // after we've created a stream of `ResolvedPaneMeta[]`, we need to clean up\n  // the results to remove unwanted loading panes and prevent unnecessary\n  // emissions\n  return resolvedPanes$.pipe(\n    // this diffs the previous emission with the current one. if there is a new\n    // loading pane at the same position where a previous pane already had a\n    // resolved value (looking at the IDs to compare), then return the previous\n    // pane instead of the loading pane\n    scan(\n      (prev, next) =>\n        next.map((nextPane, index) => {\n          const prevPane = prev[index] as ResolvedPaneMeta | undefined\n          if (!prevPane) return nextPane\n          if (nextPane.type !== 'loading') return nextPane\n\n          if (prevPane.routerPaneSibling.id === nextPane.routerPaneSibling.id) {\n            return prevPane\n          }\n          return nextPane\n        }),\n      [] as ResolvedPaneMeta[],\n    ),\n    // this prevents duplicate emissions\n    distinctUntilChanged((prev, next) => {\n      if (prev.length !== next.length) return false\n\n      for (let i = 0; i < next.length; i++) {\n        const prevValue = prev[i]\n        const nextValue = next[i]\n        if (hashResolvedPaneMeta(prevValue) !== hashResolvedPaneMeta(nextValue)) {\n          return false\n        }\n      }\n\n      return true\n    }),\n  )\n}\n","import {useEffect, useMemo, useState} from 'react'\nimport {ReplaySubject} from 'rxjs'\nimport {map} from 'rxjs/operators'\nimport {type RouterState, useRouter} from 'sanity/router'\n\nimport {LOADING_PANE} from '../constants'\nimport {type PaneNode, type RouterPaneGroup, type RouterPanes} from '../types'\nimport {useStructureTool} from '../useStructureTool'\nimport {createResolvedPaneNodeStream} from './createResolvedPaneNodeStream'\n\ninterface PaneData {\n  active: boolean\n  childItemId: string | null\n  groupIndex: number\n  index: number\n  itemId: string\n  key: string\n  pane: PaneNode | typeof LOADING_PANE\n  params: Record<string, string | undefined> & {perspective?: string}\n  path: string\n  payload: unknown\n  selected: boolean\n  siblingIndex: number\n}\n\nexport interface Panes {\n  paneDataItems: PaneData[]\n  routerPanes: RouterPanes\n  resolvedPanes: (PaneNode | typeof LOADING_PANE)[]\n}\n\nfunction useRouterPanesStream() {\n  const [routerStateSubject] = useState(() => new ReplaySubject<RouterState>(1))\n  const routerPanes$ = useMemo(\n    () =>\n      routerStateSubject\n        .asObservable()\n        .pipe(map((_routerState) => (_routerState?.panes || []) as RouterPanes)),\n    [routerStateSubject],\n  )\n  const {state: routerState} = useRouter()\n  useEffect(() => {\n    routerStateSubject.next(routerState)\n  }, [routerState, routerStateSubject])\n\n  return routerPanes$\n}\n\nexport function useResolvedPanes(): Panes {\n  // used to propagate errors from async effect. throwing inside of the render\n  // will bubble the error to react where it can be picked up by standard error\n  // boundaries\n  const [error, setError] = useState<unknown>()\n  if (error) throw error\n\n  const {structureContext, rootPaneNode} = useStructureTool()\n\n  const [data, setData] = useState<Panes>({\n    paneDataItems: [],\n    resolvedPanes: [],\n    routerPanes: [],\n  })\n\n  const routerPanesStream = useRouterPanesStream()\n\n  useEffect(() => {\n    const resolvedPanes$ = createResolvedPaneNodeStream({\n      rootPaneNode,\n      routerPanesStream,\n      structureContext,\n    }).pipe(\n      map((resolvedPanes) => {\n        const routerPanes = resolvedPanes.reduce<RouterPanes>((acc, next) => {\n          const currentGroup = acc[next.groupIndex] || []\n          currentGroup[next.siblingIndex] = next.routerPaneSibling\n          acc[next.groupIndex] = currentGroup\n          return acc\n        }, [])\n\n        const groupsLen = routerPanes.length\n\n        const paneDataItems = resolvedPanes.map((pane) => {\n          const {groupIndex, flatIndex, siblingIndex, routerPaneSibling, path} = pane\n          const itemId = routerPaneSibling.id\n          const nextGroup = routerPanes[groupIndex + 1] as RouterPaneGroup | undefined\n\n          const paneDataItem: PaneData = {\n            active: groupIndex === groupsLen - 2,\n            childItemId: nextGroup?.[0].id ?? null,\n            index: flatIndex,\n            itemId: routerPaneSibling.id,\n            groupIndex,\n            key: `${\n              pane.type === 'loading' ? 'unknown' : pane.paneNode.id\n            }-${itemId}-${siblingIndex}`,\n            pane: pane.type === 'loading' ? LOADING_PANE : pane.paneNode,\n            params: routerPaneSibling.params || {},\n            path: path.join(';'),\n            payload: routerPaneSibling.payload,\n            selected: flatIndex === resolvedPanes.length - 1,\n            siblingIndex,\n          }\n\n          return paneDataItem\n        })\n\n        return {\n          paneDataItems,\n          routerPanes,\n          resolvedPanes: paneDataItems.map((pane) => pane.pane),\n        }\n      }),\n    )\n\n    const subscription = resolvedPanes$.subscribe({\n      next: (result) => setData(result),\n      error: (e) => setError(e),\n    })\n\n    return () => subscription.unsubscribe()\n  }, [rootPaneNode, routerPanesStream, structureContext])\n\n  return data\n}\n","import {uuid} from '@sanity/uuid'\nimport {firstValueFrom, type Observable} from 'rxjs'\nimport {type DocumentStore, getPublishedId} from 'sanity'\n\nimport {PaneResolutionError} from '../../../structureResolvers'\n\nexport function removeDraftPrefix(documentId: string): string {\n  const publishedId = getPublishedId(documentId)\n\n  if (publishedId !== documentId) {\n    console.warn(\n      'Removed unexpected draft id in document link: All links to documents should have the ' +\n        '`drafts.`-prefix removed and something appears to have made an intent link to `%s`',\n      documentId,\n    )\n  }\n\n  return publishedId\n}\n\nexport async function ensureDocumentIdAndType(\n  documentStore: DocumentStore,\n  id: string | undefined,\n  type: string | undefined,\n): Promise<{id: string; type: string}> {\n  if (id && type) return {id, type}\n  if (!id && type) return {id: uuid(), type}\n  if (id && !type) {\n    const resolvedType = await firstValueFrom(\n      documentStore.resolveTypeForDocument(id) as Observable<string>,\n    )\n\n    return {id, type: resolvedType}\n  }\n\n  throw new PaneResolutionError({\n    message: 'Neither document `id` or `type` was provided when trying to resolve intent.',\n  })\n}\n","import {memo, useCallback, useEffect, useState} from 'react'\nimport {isRecord, useDocumentStore} from 'sanity'\nimport {useRouter, useRouterState} from 'sanity/router'\n\nimport {resolveIntent} from '../../../structureResolvers'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {ensureDocumentIdAndType} from './utils'\n\nconst EMPTY_RECORD: Record<string, unknown> = {}\n\n/**\n * A component that receives an intent from props and redirects to the resolved\n * intent location (while showing a loading spinner during the process)\n */\nexport const IntentResolver = memo(function IntentResolver() {\n  const {navigate} = useRouter()\n  const maybeIntent = useRouterState(\n    useCallback((routerState) => {\n      const intentName = typeof routerState.intent === 'string' ? routerState.intent : undefined\n      return intentName\n        ? {\n            intent: intentName,\n            params: isRecord(routerState.params) ? routerState.params : EMPTY_RECORD,\n            payload: routerState.payload,\n          }\n        : undefined\n    }, []),\n  )\n  const {rootPaneNode, structureContext} = useStructureTool()\n  const documentStore = useDocumentStore()\n  const [error, setError] = useState<unknown>(null)\n\n  // this re-throws errors so that parent ErrorBoundary's can handle them properly\n  if (error) throw error\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    if (maybeIntent) {\n      const {intent, params, payload} = maybeIntent\n\n      let cancelled = false\n      async function effect() {\n        const {id, type} = await ensureDocumentIdAndType(\n          documentStore,\n          typeof params.id === 'string' ? params.id : undefined,\n          typeof params.type === 'string' ? params.type : undefined,\n        )\n\n        if (cancelled) return\n\n        const panes = await resolveIntent({\n          intent,\n          params: {...params, id, type},\n          payload,\n          rootPaneNode,\n          structureContext,\n        })\n\n        if (cancelled) return\n\n        navigate({panes}, {replace: true})\n      }\n\n      effect().catch(setError)\n\n      return () => {\n        cancelled = true\n      }\n    }\n  }, [documentStore, maybeIntent, navigate, rootPaneNode, structureContext])\n\n  return null\n})\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {SyncIcon} from '@sanity/icons'\nimport {Box, Card, Code, Container, Heading, Stack, Text} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {SerializeError} from '../../structureBuilder'\nimport {PaneResolutionError} from '../../structureResolvers'\n\nconst PathSegment = styled.span`\n  &:not(:last-child)::after {\n    content: ' ➝ ';\n    opacity: 0.5;\n  }\n`\n\nfunction formatStack(stack: string) {\n  return (\n    stack\n      // Prettify builder functions\n      .replace(/\\(\\.\\.\\.\\)\\./g, '(...)\\n  .')\n      // Remove webpack cruft from function names\n      .replace(/__WEBPACK_IMPORTED_MODULE_\\d+_+/g, '')\n      // Remove default export postfix from function names\n      .replace(/___default\\./g, '.')\n      // Replace full host path, leave only path to JS-file\n      .replace(new RegExp(` \\\\(https?:\\\\/\\\\/${window.location.host}`, 'g'), ' (')\n  )\n}\n\ninterface StructureErrorProps {\n  error: unknown\n}\n\nexport function StructureError({error}: StructureErrorProps) {\n  if (!(error instanceof PaneResolutionError)) {\n    throw error\n  }\n  const {cause} = error\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  // Serialize errors are well-formatted and should be readable, in these cases a stack trace is\n  // usually not helpful. Build errors in dev (with HMR) usually also contains a bunch of garbage\n  // instead of an actual error message, so make sure we show the message in these cases as well\n  const stack = cause?.stack || error.stack\n  const showStack =\n    stack && !(cause instanceof SerializeError) && !error.message.includes('Module build failed:')\n\n  const path = cause instanceof SerializeError ? cause.path : []\n  const helpId = (cause instanceof SerializeError && cause.helpId) || error.helpId\n\n  const handleReload = useCallback(() => {\n    window.location.reload()\n  }, [])\n\n  return (\n    <Card height=\"fill\" overflow=\"auto\" padding={4} sizing=\"border\" tone=\"critical\">\n      <Container>\n        <Heading as=\"h2\">{t('structure-error.header.text')}</Heading>\n\n        <Card marginTop={4} padding={4} radius={2} overflow=\"auto\" shadow={1} tone=\"inherit\">\n          {path.length > 0 && (\n            <Stack space={2}>\n              <Text size={1} weight=\"medium\">\n                {t('structure-error.structure-path.label')}\n              </Text>\n              <Code>\n                {/* TODO: it seems like the path is off by one and includes */}\n                {/* `root` twice  */}\n                {path.slice(1).map((segment, i) => (\n                  <PathSegment key={`${segment}-${i}`}>{segment}</PathSegment>\n                ))}\n              </Code>\n            </Stack>\n          )}\n\n          <Stack marginTop={4} space={2}>\n            <Text size={1} weight=\"medium\">\n              {t('structure-error.error.label')}\n            </Text>\n            <Code>{showStack ? formatStack(stack) : error.message}</Code>\n          </Stack>\n\n          {helpId && (\n            <Box marginTop={4}>\n              <Text>\n                <a href={generateHelpUrl(helpId)} rel=\"noopener noreferrer\" target=\"_blank\">\n                  {t('structure-error.docs-link.text')}\n                </a>\n              </Text>\n            </Box>\n          )}\n\n          <Box marginTop={4}>\n            <Button\n              text={t('structure-error.reload-button.text')}\n              icon={SyncIcon}\n              tone=\"primary\"\n              onClick={handleReload}\n            />\n          </Box>\n        </Card>\n      </Container>\n    </Card>\n  )\n}\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {Box, Card, Container, Flex, Stack, Text} from '@sanity/ui'\nimport {useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../i18n'\n\nexport function NoDocumentTypesScreen() {\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Card height=\"fill\">\n      <Flex align=\"center\" height=\"fill\" justify=\"center\" padding={4} sizing=\"border\">\n        <Container width={0}>\n          <Card padding={4} radius={2} shadow={1} tone=\"caution\">\n            <Flex>\n              <Box>\n                <Text size={1}>\n                  <WarningOutlineIcon />\n                </Text>\n              </Box>\n              <Stack flex={1} marginLeft={3} space={3}>\n                <Text as=\"h1\" size={1} weight=\"medium\">\n                  {t('no-document-types-screen.title')}\n                </Text>\n                <Text as=\"p\" muted size={1}>\n                  {t('no-document-types-screen.subtitle')}\n                </Text>\n                <Text as=\"p\" muted size={1}>\n                  <a\n                    href=\"https://www.sanity.io/docs/create-a-schema-and-configure-sanity-studio\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    {t('no-document-types-screen.link-text')}\n                  </a>\n                </Text>\n              </Stack>\n            </Flex>\n          </Card>\n        </Container>\n      </Flex>\n    </Card>\n  )\n}\n","import {type ObjectSchemaType} from '@sanity/types'\nimport {useEffect} from 'react'\nimport {\n  unstable_useValuePreview as useValuePreview,\n  useEditState,\n  usePerspective,\n  useSchema,\n  useTranslation,\n} from 'sanity'\n\nimport {LOADING_PANE} from '../../constants'\nimport {useDocumentLastRev} from '../../hooks/useDocumentLastRev'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type Panes} from '../../structureResolvers'\nimport {type DocumentPaneNode} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\n\ninterface StructureTitleProps {\n  resolvedPanes: Panes['resolvedPanes']\n}\n\n// TODO: Fix state jank when editing different versions inside panes.\nconst DocumentTitle = (props: {documentId: string; documentType: string}) => {\n  const {documentId, documentType} = props\n  const {selectedReleaseId} = usePerspective()\n\n  const editState = useEditState(documentId, documentType, 'default', selectedReleaseId)\n  const schema = useSchema()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const isNewDocument = !editState?.published && !editState?.draft\n  const documentValue = editState?.version || editState?.draft || editState?.published\n  const schemaType = schema.get(documentType) as ObjectSchemaType | undefined\n\n  const {value, isLoading: previewValueIsLoading} = useValuePreview({\n    enabled: !!documentValue,\n    schemaType,\n    value: documentValue,\n  })\n\n  const {lastRevisionDocument} = useDocumentLastRev(documentId, documentType)\n  const isDeleted = lastRevisionDocument && !documentValue\n\n  // if the document is deleted, we don't want to show the title\n  const documentTitle = isDeleted\n    ? ''\n    : isNewDocument\n      ? t('browser-document-title.new-document', {\n          schemaType: schemaType?.title || schemaType?.name,\n        })\n      : value?.title || t('browser-document-title.untitled-document')\n\n  const settled = editState.ready && !previewValueIsLoading\n  const newTitle = useConstructDocumentTitle(documentTitle)\n  useEffect(() => {\n    if (!settled) return\n    // Set the title as the document title\n    document.title = newTitle\n  }, [documentTitle, settled, newTitle])\n\n  return null\n}\n\nconst PassthroughTitle = (props: {title?: string}) => {\n  const {title} = props\n  const newTitle = useConstructDocumentTitle(title)\n  useEffect(() => {\n    // Set the title as the document title\n    document.title = newTitle\n  }, [newTitle, title])\n  return null\n}\n\nexport const StructureTitle = (props: StructureTitleProps) => {\n  const {resolvedPanes} = props\n\n  if (!resolvedPanes?.length) return null\n\n  const lastPane = resolvedPanes[resolvedPanes.length - 1]\n\n  // If the last pane is loading, display the structure tool title only\n  if (isLoadingPane(lastPane)) {\n    return <PassthroughTitle />\n  }\n\n  // If the last pane is a document\n  if (isDocumentPane(lastPane)) {\n    // Passthrough the document pane's title, which may be defined in structure builder\n    if (lastPane?.title) {\n      return <PassthroughTitle title={lastPane.title} />\n    }\n\n    // Otherwise, display a `document.title` containing the resolved Sanity document title\n    return <DocumentTitle documentId={lastPane.options.id} documentType={lastPane.options.type} />\n  }\n\n  // Otherwise, display the last pane's title (if present)\n  return <PassthroughTitle title={lastPane?.title} />\n}\n\n/**\n * Construct a pipe delimited title containing `activeTitle` (if applicable) and the base structure title.\n *\n * @param activeTitle - Title of the first segment\n *\n * @returns A pipe delimited title in the format `${activeTitle} | %BASE_STRUCTURE_TITLE%`\n * or simply `%BASE_STRUCTURE_TITLE` if `activeTitle` is undefined.\n */\nfunction useConstructDocumentTitle(activeTitle?: string) {\n  const structureToolBaseTitle = useStructureTool().structureContext.title\n  return [activeTitle, structureToolBaseTitle].filter((title) => title).join(' | ')\n}\n\n// Type guards\nfunction isDocumentPane(pane: Panes['resolvedPanes'][number]): pane is DocumentPaneNode {\n  return pane !== LOADING_PANE && pane.type === 'document'\n}\n\nfunction isLoadingPane(pane: Panes['resolvedPanes'][number]): pane is typeof LOADING_PANE {\n  return pane === LOADING_PANE\n}\n","import {PortalProvider, useTheme, useToast} from '@sanity/ui'\nimport {isHotkey} from 'is-hotkey-esm'\nimport {Fragment, memo, useCallback, useEffect, useState} from 'react'\nimport {_isCustomDocumentTypeDefinition, useSchema} from 'sanity'\nimport {useRouterState} from 'sanity/router'\nimport {styled} from 'styled-components'\n\nimport {LOADING_PANE} from '../../constants'\nimport {LoadingPane, StructureToolPane} from '../../panes'\nimport {useResolvedPanes} from '../../structureResolvers'\nimport {type PaneNode} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {PaneLayout} from '../pane'\nimport {NoDocumentTypesScreen} from './NoDocumentTypesScreen'\nimport {StructureTitle} from './StructureTitle'\n\ninterface StructureToolProps {\n  onPaneChange: (panes: Array<PaneNode | typeof LOADING_PANE>) => void\n}\n\nconst StyledPaneLayout = styled(PaneLayout)`\n  min-height: 100%;\n  min-width: 320px;\n`\n\nconst isSaveHotkey = isHotkey('mod+s')\n\n/**\n * @internal\n */\nexport const StructureTool = memo(function StructureTool({onPaneChange}: StructureToolProps) {\n  const {push: pushToast} = useToast()\n  const schema = useSchema()\n  const {layoutCollapsed, setLayoutCollapsed} = useStructureTool()\n  const {paneDataItems, resolvedPanes} = useResolvedPanes()\n  // Intent resolving is processed by the sibling `<IntentResolver />` but it doesn't have a UI for indicating progress.\n  // We handle that here, so if there are only 1 pane (the root structure), and there's an intent state in the router, we need to show a placeholder LoadingPane until\n  // the structure is resolved and we know what panes to load/display\n  const isResolvingIntent = useRouterState(\n    useCallback((routerState) => typeof routerState.intent === 'string', []),\n  )\n  const {\n    sanity: {media},\n  } = useTheme()\n\n  const [portalElement, setPortalElement] = useState<HTMLDivElement | null>(null)\n\n  const handleRootCollapse = useCallback(() => setLayoutCollapsed(true), [setLayoutCollapsed])\n  const handleRootExpand = useCallback(() => setLayoutCollapsed(false), [setLayoutCollapsed])\n\n  useEffect(() => {\n    // we check for length before emitting here to skip the initial empty array\n    // state from the `useResolvedPanes` hook. there should always be a root\n    // pane emitted on subsequent emissions\n    if (resolvedPanes.length) {\n      onPaneChange(resolvedPanes)\n    }\n  }, [onPaneChange, resolvedPanes])\n\n  useEffect(() => {\n    const handleGlobalKeyDown = (event: KeyboardEvent) => {\n      // Prevent `Cmd+S`\n      if (isSaveHotkey(event)) {\n        event.preventDefault()\n\n        pushToast({\n          closable: true,\n          id: 'auto-save-message',\n          status: 'info',\n          title: 'Your work is automatically saved!',\n          duration: 4000,\n        })\n      }\n    }\n\n    window.addEventListener('keydown', handleGlobalKeyDown)\n    return () => window.removeEventListener('keydown', handleGlobalKeyDown)\n  }, [pushToast])\n\n  const hasDefinedDocumentTypes = schema._original?.types.some(_isCustomDocumentTypeDefinition)\n\n  if (!hasDefinedDocumentTypes) {\n    return <NoDocumentTypesScreen />\n  }\n\n  return (\n    <PortalProvider element={portalElement || null}>\n      <StyledPaneLayout\n        flex={1}\n        height={layoutCollapsed ? undefined : 'fill'}\n        minWidth={media[1]}\n        onCollapse={handleRootCollapse}\n        onExpand={handleRootExpand}\n      >\n        {paneDataItems.map(\n          ({\n            active,\n            childItemId,\n            groupIndex,\n            itemId,\n            key: paneKey,\n            pane,\n            index: paneIndex,\n            params: paneParams,\n            path,\n            payload,\n            siblingIndex,\n            selected,\n          }) => (\n            <Fragment key={`${pane === LOADING_PANE ? 'loading' : pane.type}-${paneIndex}`}>\n              {pane === LOADING_PANE ? (\n                <LoadingPane paneKey={paneKey} path={path} selected={selected} />\n              ) : (\n                <StructureToolPane\n                  active={active}\n                  groupIndex={groupIndex}\n                  index={paneIndex}\n                  pane={pane}\n                  childItemId={childItemId}\n                  itemId={itemId}\n                  paneKey={paneKey}\n                  params={paneParams}\n                  payload={payload}\n                  path={path}\n                  selected={selected}\n                  siblingIndex={siblingIndex}\n                />\n              )}\n            </Fragment>\n          ),\n        )}\n        {/* If there's just 1 pane (the root), or less, and we're resolving an intent then it's necessary to show */}\n        {/* a loading indicator as the intent resolving is async, could take a while and can also be interrupted/redirected */}\n        {paneDataItems.length <= 1 && isResolvingIntent && (\n          <LoadingPane paneKey=\"intent-resolver\" />\n        )}\n      </StyledPaneLayout>\n      <StructureTitle resolvedPanes={resolvedPanes} />\n      <div data-portal=\"\" ref={setPortalElement} />\n    </PortalProvider>\n  )\n})\n","import {useEffect, useState} from 'react'\nimport {SourceProvider, type Tool, useWorkspace} from 'sanity'\n\nimport {ErrorBoundary} from '../../../ui-components/errorBoundary'\nimport {setActivePanes} from '../../getIntentState'\nimport {StructureToolProvider} from '../../StructureToolProvider'\nimport {type StructureToolOptions} from '../../types'\nimport {IntentResolver} from './intentResolver'\nimport {StructureError} from './StructureError'\nimport {StructureTool} from './StructureTool'\n\ninterface StructureToolBoundaryProps {\n  tool: Tool<StructureToolOptions>\n}\n\nexport function StructureToolBoundary({tool: {options}}: StructureToolBoundaryProps) {\n  const {unstable_sources: sources} = useWorkspace()\n  const [firstSource] = sources\n  const {source, defaultDocumentNode, structure} = options || {}\n\n  // Set active panes to blank on mount and unmount\n  useEffect(() => {\n    setActivePanes([])\n    return () => setActivePanes([])\n  }, [])\n\n  const [{error}, setError] = useState<{error: unknown}>({error: null})\n\n  // this re-throws if the error it catches is not a PaneResolutionError\n  if (error) return <StructureError error={error} />\n\n  return (\n    <ErrorBoundary onCatch={setError}>\n      <SourceProvider name={source || firstSource.name}>\n        <StructureToolProvider defaultDocumentNode={defaultDocumentNode} structure={structure}>\n          <StructureTool onPaneChange={setActivePanes} />\n          <IntentResolver />\n        </StructureToolProvider>\n      </SourceProvider>\n    </ErrorBoundary>\n  )\n}\n"],"names":["pairwise","operate","source","subscriber","prev","hasPrev","createOperatorSubscriber","value","p","PaneResolutionError","Error","constructor","message","context","helpId","cause","name","randomIdCache","WeakMap","assignId","obj","cachedValue","get","id","nanoid","set","isPromise","thing","then","isSerializable","isRecord","serialize","rethrowWithPaneResolutionErrors","next","unresolvedPane","flatIndex","e","wrapWithPublishReplay","args","pipe","publishReplay","refCount","createPaneResolver","middleware","resolvePane","isObservable","from","switchMap","result","observableOf","bindCache","memoBind","methodKey","boundMethods","Map","bound","method","bind","resolveIntent","options","resolvedPaneCache","nextFn","key","path","join","cachedResolvedPane","fallbackEditorPanes","params","omit","type","payload","traverse","currentId","intent","parent","levelIndex","structureContext","targetId","schemaTypeName","otherParams","resolvedPane","firstValueFrom","splitIndex","index","undefined","panes","slice","length","map","i","depthIndex","canHandleIntent","pane","filter","child","items","Promise","all","item","nextLevelIndex","resolve","_id","flat","closestPaneToRoot","rootPaneNode","sort","a","b","fallbackEditorChild","nodeId","replace","resolveDocumentNode","template","defaultDocumentBuilder","schemaType","documentId","initialValueTemplate","hashContext","JSON","stringify","parentId","serializeOptionsIndex","serializeOptions","serializeOptionsPath","hashResolvedPaneMeta","meta","normalized","routerPaneSibling","groupIndex","siblingIndex","paneNode","resolvePaneTree","flattenedRouterPanes","current","rest","resolvedPaneMeta","loadingPanes","restIndex","_","currentIndex","nextStream","startsWith","concat","nextResolvedPanes","console","warn","generateHelpUrl","createResolvedPaneNodeStream","routerPanesStream","initialCacheState","cacheKeysByFlatIndex","NEVER","rawRouterPanes","routerPanes","flatMap","routerPaneGroup","startWith","curr","prevValue","currValue","isEqual","diffIndex","scan","acc","beforeDiffIndex","afterDiffIndex","keysToKeep","Set","keySet","Array","keysToDelete","has","delete","cacheKeySet","add","nextPane","prevPane","distinctUntilChanged","nextValue","useRouterPanesStream","$","_c","routerStateSubject","useState","_temp","t0","t1","asObservable","_temp2","routerPanes$","state","routerState","useRouter","t2","t3","useEffect","_routerState","ReplaySubject","useResolvedPanes","error","setError","useStructureTool","Symbol","for","paneDataItems","resolvedPanes","data","setData","subscription","_temp5","subscribe","unsubscribe","reduce","_temp3","groupsLen","itemId","nextGroup","active","childItemId","LOADING_PANE","selected","_temp4","pane_0","currentGroup","ensureDocumentIdAndType","documentStore","uuid","resolvedType","resolveTypeForDocument","EMPTY_RECORD","IntentResolver","memo","navigate","maybeIntent","useRouterState","useDocumentStore","cancelled","effect","catch","intentName","PathSegment","styled","span","formatStack","stack","RegExp","window","location","host","StructureError","t","useTranslation","structureLocaleNamespace","showStack","SerializeError","includes","handleReload","jsx","Heading","t4","jsxs","Stack","Text","Code","t5","t6","t7","t8","t9","t10","Box","t11","t12","Button","SyncIcon","t13","Card","t14","Container","segment","reload","NoDocumentTypesScreen","WarningOutlineIcon","Flex","DocumentTitle","props","documentType","selectedReleaseId","usePerspective","editState","useEditState","schema","useSchema","isNewDocument","published","draft","documentValue","version","isLoading","previewValueIsLoading","useValuePreview","enabled","lastRevisionDocument","useDocumentLastRev","documentTitle","title","settled","ready","newTitle","useConstructDocumentTitle","document","PassthroughTitle","StructureTitle","lastPane","isLoadingPane","isDocumentPane","activeTitle","structureToolBaseTitle","StyledPaneLayout","PaneLayout","isSaveHotkey","isHotkey","StructureTool","onPaneChange","push","pushToast","useToast","layoutCollapsed","setLayoutCollapsed","isResolvingIntent","sanity","useTheme","media","portalElement","setPortalElement","handleRootCollapse","handleRootExpand","handleGlobalKeyDown","event","preventDefault","closable","status","duration","addEventListener","removeEventListener","_original","types","some","_isCustomDocumentTypeDefinition","LoadingPane","t15","t16","PortalProvider","paneKey","paneIndex","paneParams","Fragment","StructureToolPane","StructureToolBoundary","tool","unstable_sources","sources","useWorkspace","firstSource","defaultDocumentNode","structure","setActivePanes","StructureToolProvider","ErrorBoundary","SourceProvider"],"mappings":"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","x_google_ignoreList":[0]}