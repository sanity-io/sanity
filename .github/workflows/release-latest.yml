name: Release @latest

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      publish:
        description: Only run NPM publishing
        required: true
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  release-latest:
    if: >
      github.event_name == 'workflow_dispatch' || 
      startsWith(github.event.head_commit.message, 'chore(release): publish ')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write # to enable use of OIDC for npm provenance
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
      EXPECTED_NPM_USER: sanity-io

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version: lts/*

      - name: Install deps & build
        run: pnpm install --ignore-scripts

      - name: Build
        run: pnpm build --output-logs=full --log-order=grouped

      - name: Configure git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'

      - name: Get version from lerna.json
        id: release-as
        run: |
          version=$(jq -r .version lerna.json)
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Validate version
        run: |
          echo "Release version: $RELEASE_AS"
          if [[ ! "$RELEASE_AS" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version: $RELEASE_AS"
            exit 1
          fi
        env:
          RELEASE_AS: ${{ steps.release-as.outputs.version }}

      - name: Set publishing config
        run: pnpm config set '//registry.npmjs.org/:_authToken' "${NPM_PUBLISH_TOKEN}"
        env:
          NPM_PUBLISH_TOKEN: ${{secrets.NPM_PUBLISH_TOKEN}}

      - name: Check valid token
        run: |
          WHOAMI_RESULT=$(npm whoami)
          echo "npm whoami result: $WHOAMI_RESULT"
          if [ "$WHOAMI_RESULT" != "$EXPECTED_NPM_USER" ]; then
            echo "Error: npm whoami returned '$WHOAMI_RESULT', expected '$EXPECTED_NPM_USER'"
            exit 1
          fi
          echo "âœ… npm authentication validated - using $EXPECTED_NPM_USER account"

      - name: Tag and push version
        run: |
        if: ${{ github.event.inputs.publish != 'true' }}
          git tag v$RELEASE_AS -m v$RELEASE_AS
          git push origin v$RELEASE_AS
        env:
          RELEASE_AS: ${{steps.release-as.outputs.version}}

      - name: Publish packages to pnpm
        run: pnpm -r publish
        env:
          NPM_CONFIG_PROVENANCE: true

      - name: Build bundle
        run: pnpm run build:bundle

      - name: Upload bundles to staging bucket
        env:
          GOOGLE_PROJECT_ID: ${{ secrets.GCS_STAGING_PROJECT_ID }}
          GCLOUD_SERVICE_KEY: ${{ secrets.GCS_STAGING_SERVICE_KEY }}
          GCLOUD_BUCKET: ${{ secrets.GCS_STAGING_BUCKET }}
        run: pnpm bundle-manager publish --tag=latest

      - name: Upload bundles to production bucket
        env:
          GOOGLE_PROJECT_ID: ${{ secrets.GCS_PRODUCTION_PROJECT_ID }}
          GCLOUD_SERVICE_KEY: ${{ secrets.GCS_PRODUCTION_SERVICE_KEY }}
          GCLOUD_BUCKET: ${{ secrets.GCS_PRODUCTION_BUCKET }}
        # Note: we have not enabled tagging in production yet, so this should just exactly the same way as the
        # old circleci workflow
        run: pnpm bundle-manager publish
