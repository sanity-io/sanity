name: Release @next

on:
  push:
    branches:
      - main

permissions:
  contents: read # for checkout

jobs:
  release-next:
    # this runs in main, and we want to skip running it when release PRs are merged
    # format of the commit message is specified in lerna.json
    if: >
      !startsWith(github.event.head_commit.message, 'chore(release): publish')
    permissions:
      id-token: write # to enable use of OIDC for npm provenance
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
      EXPECTED_NPM_USER: sanity-io
    steps:
      - uses: actions/create-github-app-token@v2
        id: generate-token
        with:
          app-id: ${{ secrets.ECOSPARK_APP_ID }}
          private-key: ${{ secrets.ECOSPARK_APP_PRIVATE_KEY }}

      # Publish packages to npm under the `next` tag on new commits to main.
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version: lts/*

      - name: Install deps
        run: pnpm install --ignore-scripts

      - name: Bump canary versions
        run: |
          npx lerna version \
            --conventional-commits \
            --conventional-prerelease \
            --preid=next \
            --no-git-tag-version \
            --exact \
            --yes

          COMMIT_HASH=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date -u +"%Y%m%d%H%M")
          VERSION_SUFFIX="${COMMIT_HASH}-${TIMESTAMP}"

          echo "Appending version suffix: $VERSION_SUFFIX"

          for pkg in $(lerna list --json | jq -r '.[].location'); do
            jq --arg suffix "$VERSION_SUFFIX" '.version += "-" + $suffix' "$pkg/package.json" > "$pkg/package.tmp.json"
            mv "$pkg/package.tmp.json" "$pkg/package.json"
          done

      - name: Re-install after version bump
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build --output-logs=full --log-order=grouped

      - name: Set publishing config
        run: pnpm config set '//registry.npmjs.org/:_authToken' "${NPM_PUBLISH_TOKEN}"
        env:
          NPM_PUBLISH_TOKEN: ${{secrets.NPM_PUBLISH_TOKEN}}

      - name: Check valid token
        run: |
          WHOAMI_RESULT=$(npm whoami)
          echo "npm whoami result: $WHOAMI_RESULT"
          if [ "$WHOAMI_RESULT" != "$EXPECTED_NPM_USER" ]; then
            echo "Error: npm whoami returned '$WHOAMI_RESULT', expected '$EXPECTED_NPM_USER'"
            exit 1
          fi
          echo "âœ… npm authentication validated - using $EXPECTED_NPM_USER account"

      - name: Publish packages to npm
        run: pnpm -r publish --tag next --no-git-checks
        env:
          NPM_CONFIG_PROVENANCE: true

      - name: Build bundles
        run: pnpm run build:bundle

      - name: Upload bundles to staging bucket
        env:
          GOOGLE_PROJECT_ID: ${{ secrets.GCS_STAGING_PROJECT_ID }}
          GCLOUD_SERVICE_KEY: ${{ secrets.GCS_STAGING_SERVICE_KEY }}
          GCLOUD_BUCKET: ${{ secrets.GCS_STAGING_BUCKET }}
        run: pnpm bundle-manager publish --tag=next

      - name: Upload bundles to production bucket
        # NOTE: we're not uploading prereleases to production bucket yet
        if: ${{ false }}
        env:
          GOOGLE_PROJECT_ID: ${{ secrets.GCS_PRODUCTION_PROJECT_ID }}
          GCLOUD_SERVICE_KEY: ${{ secrets.GCS_PRODUCTION_SERVICE_KEY }}
          GCLOUD_BUCKET: ${{ secrets.GCS_PRODUCTION_BUCKET }}
        run: pnpm bundle-manager publish --tag=next
