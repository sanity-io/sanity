name: CLI Unit tests

on:
  # Build on pushes branches that have a PR (including drafts)
  pull_request:
  # Build on commits pushed to branches without a PR if it's in the allowlist
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  cli-test:
    timeout-minutes: 60
    name: CLI Tests (${{ matrix.os }} / node ${{ matrix.node }})
    runs-on: ${{ matrix.os }}
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    continue-on-error: ${{ matrix.experimental }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node: [20, 22, 24]
        experimental: [false]
        # include:
        #   - os: windows-latest
        #     node: 16
        #     experimental: true

    steps:
      - name: Check if this is a release PR or commit
        # Provide a way to skip running cli tests on release PRs or when the release PR is merged because
        # the CLI tests will attempt to install the not-yet-released packages from npm
        id: check_release
        run: |
          SKIP="false"
          if [[ $MESSAGE =~ ^chore\(release\):\ publish\  ]]; then
            SKIP="true"
          fi
          echo "skip=$SKIP" >> $GITHUB_OUTPUT
        env:
          MESSAGE: ${{ (github.event_name == 'pull_request' && github.event.pull_request.title) ||  (github.event_name == 'push' && github.event.head_commit.message)  }}

      - uses: actions/checkout@v4
        if: steps.check_release.outputs.skip != 'true'
        with:
          fetch-depth: 0

      - name: Check if only examples files changed
        if: steps.check_release.outputs.skip != 'true'
        id: check_examples_only
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PRs, check files changed in the PR
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          else
            # For pushes, check files in the last commit
            CHANGED_FILES=$(git diff --name-only HEAD~1)
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Check if all changed files are in examples/ directory
          EXAMPLES_ONLY="true"
          while IFS= read -r file; do
            if [[ ! "$file" =~ ^examples/ ]]; then
              EXAMPLES_ONLY="false"
              break
            fi
          done <<< "$CHANGED_FILES"

          echo "examples_only=$EXAMPLES_ONLY" >> $GITHUB_OUTPUT

      - name: Skip CLI tests for examples-only changes
        if: steps.check_release.outputs.skip != 'true' && steps.check_examples_only.outputs.examples_only == 'true'
        run: |
          echo "Only examples files changed, skipping CLI tests"
          exit 0
      - uses: pnpm/action-setup@v4
        if: steps.check_release.outputs.skip != 'true' && steps.check_examples_only.outputs.examples_only != 'true'
      - uses: actions/setup-node@v4
        if: steps.check_release.outputs.skip != 'true' && steps.check_examples_only.outputs.examples_only != 'true'
        with:
          cache: pnpm
          node-version: ${{ matrix.node }}

      - name: Install project dependencies
        if: steps.check_release.outputs.skip != 'true' && steps.check_examples_only.outputs.examples_only != 'true'
        run: pnpm install

      - name: Build CLI
        if: steps.check_release.outputs.skip != 'true' && steps.check_examples_only.outputs.examples_only != 'true'
        run: pnpm build --output-logs=full --log-order=grouped # Needed for CLI tests

      - name: Test
        if: steps.check_release.outputs.skip != 'true' && steps.check_examples_only.outputs.examples_only != 'true'
        id: test
        run: pnpm test:vitest --retry 4 --silent --project=@sanity/cli
        env:
          # Update token in github and change below to ${{ secrets.SANITY_CI_CLI_AUTH_TOKEN }} after merge to main
          SANITY_CI_CLI_AUTH_TOKEN_STAGING: ${{ secrets.SANITY_CI_CLI_AUTH_TOKEN_STAGING }}
