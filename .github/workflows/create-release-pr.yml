name: Create Release PR

on:
  workflow_run:
    workflows: ["Release @next"]
    types:
      - completed
    branches:
      - main

permissions:
  contents: read

jobs:
  create-or-update-pr:
    # Run when release-next workflow completes on main OR feature branch (for testing)
    # Skip if the triggering commit was a release commit
    if: >
      github.event.workflow_run.conclusion != 'cancelled' &&
      github.event.workflow_run.head_branch == 'main' &&
      !startsWith(github.event.workflow_run.head_commit.message, 'chore(release): publish')
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
      actions: read

    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
          fetch-depth: 0
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version: lts/*

      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ secrets.ECOSPARK_APP_ID }}
          private-key: ${{ secrets.ECOSPARK_APP_PRIVATE_KEY }}

      - name: Check release-next workflow status
        id: check-release-next
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          WORKFLOW_RUN_ID="${{ github.event.workflow_run.id }}"
          WORKFLOW_CONCLUSION="${{ github.event.workflow_run.conclusion }}"
          COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"

          echo "Release @next workflow run ID: $WORKFLOW_RUN_ID"
          echo "Workflow conclusion: $WORKFLOW_CONCLUSION"
          echo "Commit SHA: $COMMIT_SHA"

          # Get the workflow run URL for reference
          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/$WORKFLOW_RUN_ID"
          echo "workflow_url=$WORKFLOW_URL" >> $GITHUB_OUTPUT

          if [ "$WORKFLOW_CONCLUSION" = "success" ]; then
            echo "Release @next workflow succeeded"
            echo "release_failed=false" >> $GITHUB_OUTPUT
            echo "status_message=Release @next build succeeded for commit $COMMIT_SHA" >> $GITHUB_OUTPUT
          else
            echo "Release @next workflow failed with conclusion: $WORKFLOW_CONCLUSION"
            echo "release_failed=true" >> $GITHUB_OUTPUT
            echo "status_message=Release @next build failed with conclusion: $WORKFLOW_CONCLUSION for commit $COMMIT_SHA" >> $GITHUB_OUTPUT
          fi

      - name: Install deps & build
        run: pnpm install --ignore-scripts

      - name: Build
        run: pnpm build --output-logs=full --log-order=grouped

      - name: Configure git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'

      - name: Update version
        run: |
          npx lerna version \
            --force-publish \
            --no-git-tag-version \
            --conventional-commits \
            --yes
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Fix lerna.json EOF formatting
        # lerna version formats lerna.json removing EOF line
        # this is needed to pass linter
        run: npx prettier --write lerna.json

      - name: Sync workspace lockfile
        run: pnpm install --lockfile-only

      - name: Get version commit message
        # generate the commit message that would be created (determined by lerna.json)
        id: version-commit
        run: |
          VERSION=$(cat lerna.json | jq -r .version)
          echo "message=chore(release): publish v$VERSION" >> $GITHUB_OUTPUT

      - name: Get version
        id: release-as
        run: echo "version=$(cat lerna.json | jq -r .version)" >> $GITHUB_OUTPUT
      - name: Create or update PR
        uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e # v7
        id: create-pull-request
        with:
          token: ${{ steps.app-token.outputs.token }}
          title: "${{steps.version-commit.outputs.message}}"
          body: |
            🤖 I have created a release **squib** **squob**

            Merging this PR will publish v${{steps.release-as.outputs.version}} to npm 🚀

            ## Release @next Status

            ${{ steps.check-release-next.outputs.status_message }}

            ${{ steps.check-release-next.outputs.release_failed == 'true' && format('⚠️  **Warning**: The Release @next build failed for this commit. Please review the [failed workflow run]({0}) before merging this PR.', steps.check-release-next.outputs.workflow_url) || '' }}

            ${{ steps.check-release-next.outputs.release_failed == 'true' && '**This PR has been marked as draft due to the failed @next release.**' || '' }}
          commit-message: "${{steps.version-commit.outputs.message}}"
          branch: "ci/release-main"
          sign-commits: true
          base: main
          team-reviewers: "@sanity-io/studio"
          draft: ${{ steps.check-release-next.outputs.release_failed == 'true' }}
